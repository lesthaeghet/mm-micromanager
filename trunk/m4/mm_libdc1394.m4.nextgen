# This file is part of a progressive rewrite of the GNU (autotools) build
# scripts. Please do not modify this file. Instead, please modify the legacy
# build files (without the .nextgen suffix). Changes to legacy files will be
# automatically detected and manually applied to the next-gen files.
# - Mark Tsuchida
#
# %nextgen_build_filename = mm_libdc1394.m4

# Author: Mark Tsuchida
# Copyright: University of California, San Francisco, 2014
# License: BSD

# Usage: MM_LIB_DC1394
#
# Checks for an appropriate version of libdc1394 2.x.
#
# Defines variables LIBDC1394_CPPFLAGS, LIBDC1394_CFLAGS, LIBDC1394_LDFLAGS,
# and LIBDC1394_LIBS, which can be overridden by the user (although that is
# rarely necessary).
#
# If LIBDC1394_INCDIR or LIBDC1394_LIBDIR is given, add to search paths when
# checking.
#
# Returns yes or no in shell variable have_libdc1394.

# TODO Make an abstract macro that expands to either the following or to
# MM_LIB_USB_0_1.

AC_DEFUN([MM_LIB_DC1394], [

AC_ARG_VAR([LIBDC1394_CPPFLAGS], [preprocessor flags for libdc1394])
AC_ARG_VAR([LIBDC1394_CFLAGS], [compiler flags for libdc1394])
AC_ARG_VAR([LIBDC1394_LDFLAGS], [linker flags for libdc1394])
AC_ARG_VAR([LIBDC1394_LIBS], [library flags for libdc1394])

# if any of the vars are already defined, do not modify and assume user knows
# what they are doing
AC_MSG_CHECKING([for libdc1394 configuration])
test -n "$LIBDC1394_CPPFLAGS" && have_libdc1394=yes
test -n "$LIBDC1394_CFLAGS" && have_libdc1394=yes
test -n "$LIBDC1394_LDFLAGS" && have_libdc1394=yes
test -n "$LIBDC1394_LIBS" && have_libdc1394=yes

AS_IF([test "x$have_libdc1394" = xyes],
[
   AC_MSG_RESULT([user provided flag(s); will skip checks])
],
[
   AC_MSG_RESULT([no; will check if available])

   # defaults
   have_libdc1394=
   test -n "$LIBDC1394_INCDIR" && LIBDC1394_CPPFLAGS="-I$LIBDC1394_INCDIR"
   test -n "$LIBDC1394_LIBDIR" && LIBDC1394_LDFLAGS="-L$LIBDC1394_LIBDIR"
   LIBDC1394_LIBS=-ldc1394

   # push state
   AC_LANG_PUSH([C])
   mm_libdc1394_old_cppflags="$CPPFLAGS"
   mm_libdc1394_old_cflags="$CFLAGS"
   mm_libdc1394_old_ldflags="$LDFLAGS"
   mm_libdc1394_old_libs="$LIBS"
   CPPFLAGS="$LIBDC1394_CPPFLAGS $mm_libdc1394_old_cppflags"
   CFLAGS="$LIBDC1394_CFLAGS $mm_libdc1394_old_cflags"
   LDFLAGS="$LIBDC1394_LDFLAGS $mm_libdc1394_old_ldflags"
   LIBS="$LIBDC1394_LIBS $mm_libdc1394_old_libs"
   # end push state

	# TODO We could add pkg-config-based configuration

   AC_MSG_CHECKING([for dc1394/dc1394.h])
   AC_PREPROC_IFELSE(
      [AC_LANG_PROGRAM([[#include <dc1394/dc1394.h>]])],
      [AC_MSG_RESULT([yes])],
      [AC_MSG_RESULT([no])
       have_libdc1394=no])

   AS_IF([test "x$have_libdc1394" != xno],
      [
         # Note: This test was written with libdc1394 2.2.1 in use.
         AC_MSG_CHECKING([for dc1394_capture_is_frame_corrupt in libdc1394])
         AC_LINK_IFELSE([AC_LANG_CALL([], [dc1394_capture_is_frame_corrupt])],
            [AC_MSG_RESULT([yes])
             have_libdc1394=yes],
            [AC_MSG_RESULT([no])
             have_libdc1394=no
             LIBDC1394_LIBS=])
      ])

   # pop state
   CPPFLAGS="$mm_libdc1394_old_cppflags"
   CFLAGS="$mm_libdc1394_old_cflags"
   LDFLAGS="$mm_libdc1394_old_ldflags"
   LIBS="$mm_libdc1394_old_libs"
   AC_LANG_POP([C])
   # end pop state
])
])
