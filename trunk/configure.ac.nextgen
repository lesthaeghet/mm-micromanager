# This file is part of a progressive rewrite of the GNU (autotools) build
# scripts. Please do not modify this file. Instead, please modify the legacy
# build files (without the .nextgen suffix). Changes to legacy files will be
# automatically detected and manually applied to the next-gen files.
# - Mark Tsuchida
#
# %nextgen_build_filename = configure.ac
# %nextgen_build_replaces = configure.in 7bfca1ee4c30fc410ff1d5e5e6062190
# %nextgen_build_replaces = configure.common 077a489eb345d835812214d086346f15

AC_PREREQ([2.64])
AC_INIT([Micro-Manager], [1.4], [info@micro-manager.org])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_SRCDIR([MMCore/MMCore.cpp])
AC_CANONICAL_HOST
AM_INIT_AUTOMAKE
LT_INIT([disable-static])
AC_PROG_MKDIR_P

AC_PROG_CXX([clang++ llvm-g++ g++ c++])
AC_PROG_CC([clang llvm-gcc gcc cc])


# TODO Add a --with-java, and proper autodetection of Java; use result to
# determine whether to build MMCoreJ.
AC_ARG_ENABLE([mmcorej],
   [AS_HELP_STRING([--disable-mmcorej], [do not build MMCoreJ])],
   [], [enable_mmcorej=yes])
AM_CONDITIONAL([BUILD_MMCOREJ], [test "x$enable_mmcorej" != xno])


AC_ARG_ENABLE([hardcoded-mmcorej-library-path],
   [AS_HELP_STRING([--disable-hardcoded-mmcorej-library-path],
                   [Do not use a fallback absolute path to locate the MMCoreJ_wrap native library])],
   [],
   [enable_hardcoded_mmcorej_library_path=yes])
if test "x$enable_hardcoded_mmcorej_library_path" = xyes; then
   # The path to be hard-coded into MMCoreJ's Java class loading code. This
   # should be the value of pkglibdir at build time (not configuration time),
   # so we use an escaped make variable substitution (recall that normal make
   # variables are recursively expanded).
   MMCOREJ_LIBRARY_PATH="\$(pkglibdir)"
else
   MMCOREJ_LIBRARY_PATH=
fi
AC_SUBST([MMCOREJ_LIBRARY_PATH])


AC_ARG_ENABLE([java-app],
   [AS_HELP_STRING([--disable-java-app], [do not build the Java app])],
   [], [enable_java_app=yes])
AM_CONDITIONAL([BUILD_JAVA_APP], [test "x$enable_java_app" != xno])

# TODO Use proper autodetection, and use the results to determine wheter to
# build the Java app.
if test "x$enable_java_app" != xno; then

   #----------------------------------------------------------------
   # Set the CLASSEXT location
   #----------------------------------------------------------------
   CLASSEXT=$PWD"/../3rdpartypublic/classext"
   echo "CLASSEXT="$CLASSEXT

   #----------------------------------------------------------------
   # Find ij.jar in directory
   #----------------------------------------------------------------
   AC_MSG_CHECKING(for ij.jar)
   IJJARDIR="$CLASSEXT/ij.jar"
   echo "IJJARDDIR="$IJJARDIR
   if test -r "$IJJARDIR" ; then
      IJJARPATH="$IJJARDIR"
      AC_MSG_RESULT($IJJARPATH)
   fi

   if test -z "$IJJARPATH"; then
     AC_MSG_ERROR([not found])
   fi

   #----------------------------------------------------------------
   # Find beanshell.jar in ImageJ plugins directory
   #----------------------------------------------------------------
   AC_MSG_CHECKING(for beanshell jar file in ImageJ plugins directory)
   if test -r "$CLASSEXT/bsh-2.0b4.jar" ; then
      BSHJARPATH="$CLASSEXT/bsh-2.0b4.jar"
      AC_MSG_RESULT($BSHJARPATH)
   fi
   if test -r "/usr/share/java/bsh.jar" ; then
      BSHJARPATH="/usr/share/java/bsh.jar"
      AC_MSG_RESULT($BSHJARPATH)
   fi
   if test "$BSHJARPATH" = "" ; then
      AC_MSG_ERROR([not found])
   fi

   #----------------------------------------------------------------
   # Find swingx.jar in ImageJ plugins directory
   #----------------------------------------------------------------
   AC_MSG_CHECKING(for swingx jar file in ImageJ plugins directory)
   if test -r "$CLASSEXT/swingx-0.9.5.jar" ; then
      SWINGXJARPATH="$CLASSEXT/swingx-0.9.5.jar"
      AC_MSG_RESULT($SWINGXJARPATH)
   fi
   if test -r "/usr/share/java/swingx.jar" ; then
      SWINGXJARPATH="/usr/share/java/swingx.jar"
      AC_MSG_RESULT($SWINGXJARPATH)
   fi
   if test "$SWINGXJARPATH" = "" ; then
      AC_MSG_ERROR([not found])
   fi
   
   #----------------------------------------------------------------
   # Find commons-math-2.0.jar in ImageJ plugins directory
   #----------------------------------------------------------------

   AC_MSG_CHECKING(for apache commons math jar file)
   if test -r "$CLASSEXT/commons-math-2.0.jar" ; then
      COMMONSMATHJARPATH="$CLASSEXT/plugins/commons-math-2.0.jar"
      AC_MSG_RESULT($COMMONSMATHJARPATH)
   fi
   if test -r "/usr/share/java/commons-math-2.0.jar" ; then
      COMMONSMATHJARPATH="/usr/share/java/commons-math-2.0.jar"
      AC_MSG_RESULT($COMMONSMATHJARPATH)
   fi
   if test -r $CLASSEXT"/commons-math-2.0.jar" ; then
      COMMONSMATHJARPATH=$CLASSEXT"/commons-math-2.0.jar"
      AC_MSG_RESULT($COMMONSMATHJARPATH)
   fi
   if test "$COMMONSMATHJARPATH" = "" ; then
      AC_MSG_ERROR([not found])
   fi

   #----------------------------------------------------------------
   # Find swing-layout-1.0.4.jar in ImageJ plugins directory
   #----------------------------------------------------------------
   AC_MSG_CHECKING(for swing-layout jar file)
   if test -r "$CLASSEXT/swing-layout-1.0.4.jar" ; then
      SWINGLAYOUTJARPATH="$CLASSEXT/swing-layout-1.0.4.jar"
      AC_MSG_RESULT($SWINGLAYOUTJARPATH)
   fi
   if test -r "/usr/share/java/swing-layout-1.0.4.jar" ; then
      SWINGLAYOUTJARPATH="/usr/share/java/swing-layout-1.0.4.jar"
      AC_MSG_RESULT($SWINGLAYOUTJARPATH)
   fi
   if test -r $CLASSEXT"/swing-layout-1.0.4.jar" ; then
      SWINGLAYOUTJARPATH=$CLASSEXT"/swing-layout-1.0.4.jar"
      AC_MSG_RESULT($SWINGLAYOUTJARPATH)
   fi
   if test "$SWINGLAYOUTJARPATH" = "" ; then
      AC_MSG_ERROR([not found])
   fi
   
   #----------------------------------------------------------------
   # Find AbsoluteLayout.jar 
   #----------------------------------------------------------------
   AC_MSG_CHECKING(for AbsoluteLayout jar file)
   if test -r "$CLASSEXT/AbsoluteLayout.jar" ; then
      ABSOLUTEJARPATH="$CLASSEXT/AbsoluteLayout.jar"
      AC_MSG_RESULT($ABSOLUTEJARPATH)
   fi
   if test -r "/usr/share/java/AbsoluteLayout.jar" ; then
      ABSOLUTEJARPATH="/usr/share/java/AbsoluteLayout.jar"
      AC_MSG_RESULT($ABOSLUTEJARPATH)
   fi
   if test -r $CLASSEXT"/AbsoluteLayout.jar" ; then
      ABSOLUTEJARPATH=$CLASSEXT"/AbsoluteLayout.jar"
      AC_MSG_RESULT($ABSOLUTEJARPATH)
   fi
   if test "$ABSOLUTEJARPATH" = "" ; then
      AC_MSG_ERROR([not found])
   fi
   #----------------------------------------------------------------
   # Find JFreeChart 
   #----------------------------------------------------------------
   AC_MSG_CHECKING(for JFreeChart jar file)
   if test -r "$CLASSEXT/jfreechart-1.0.13.jar" ; then
      JFREECHARTJARPATH="$CLASSEXT/jfreechart-1.0.13.jar:$CLASSEXT/jcommon-1.0.16.jar"
      AC_MSG_RESULT($JFREECHARTJARPATH)
   fi
   # TODO: look in other paths
fi


AC_SUBST(CLASSEXT)
AC_SUBST(BSHJARPATH)
AC_SUBST(SWINGXJARPATH)
AC_SUBST(COMMONSMATHJARPATH)
AC_SUBST(SWINGLAYOUTJARPATH)
AC_SUBST(ABSOLUTEJARPATH)
AC_SUBST(JFREECHARTJARPATH)
AC_SUBST(IJJARPATH)


# TODO Reinstate --disable-core flag, and skip Core-associated tests (but not
# all of the indented checks below are truly associated with the Core only)

   #---------------------------------------------------
   # Check for BOOST
   #---------------------------------------------------
   AX_BOOST_BASE([1.40.0])
   AX_BOOST_DATE_TIME
   AX_BOOST_SYSTEM


   # zlib
   MM_ARG_WITH_REQUIRED_LIB([zlib], [zlib], [ZLIB])
   MM_LIB_Z([$ZLIB_PREFIX], [], [MM_MSG_REQUIRED_LIB_FAILURE([zlib], [zlib])])

   # AppleHost dependencies
   case $host in
      *apple-darwin*) MMCORE_APPLEHOST_LDFLAGS="-framework CoreFoundation -framework IOKit" ;;
      *) MMCORE_APPLEHOST_LDFLAGS="" ;;
   esac
   AC_SUBST([MMCORE_APPLEHOST_LDFLAGS])


   #---------------------------------------------------
   # Check for SWIG
   #---------------------------------------------------
   AC_CHECK_PROGS(SWIG, swig)
   if test "$SWIG" = "" ; then
      AC_MSG_ERROR([not found, swig is needed to build this application.  Please download (http://www.swig.org/download.html) and install])
   fi



# Python and NumPy
MM_ARG_WITH_PYTHON
AS_IF([test "x$want_python" != xno],
[
   AS_IF([test -n "$PYTHON_PREFIX"],
   [
      # Be lenient if user gives --with-python=bindir instead of
      # --with-python=prefix.
      MM_PROG_PYTHON([$PYTHON_PREFIX/bin $PYTHON_PREFIX])
   ],
   [
      MM_PROG_PYTHON
   ])

   have_python=no
   AS_IF([test -n "$PYTHON"],
   [
      MM_HEADERS_PYTHON(
      [
         MM_HEADERS_NUMPY([have_python=yes])
      ])
   ])

   AS_IF([test "x$want_python" = xyes],
   [
      AS_IF([test "x$have_python" = xno],
      [
         AC_MSG_FAILURE([--with-python was given, but test for Python and NumPy failed])
      ])
   ])
   use_python=$have_python
],
[
   use_python=no
])


AM_CONDITIONAL([BUILD_MMCOREPY], [test "x$use_python" = xyes])

#----------------------------------------------------------------
# Look for java binaries and headers
#----------------------------------------------------------------

AC_CHECK_PROGS(JAVA, java kaffe guavac)
AC_CHECK_PROGS(JAVAC, javac)
AC_CHECK_PROGS(JAR, jar)

# Find Java header files:
AC_MSG_CHECKING(for java include file jni.h)
AC_ARG_WITH([javaincl], [AS_HELP_STRING([--with-javaincl=path],[set location of Java include directory])], [JAVAINCDIR="$withval"], [JAVAINCDIR=])

if test -z "$JAVAINCDIR"; then  
   JAVAINCDIR="/usr/j2sdk*/include /usr/local/j2sdk*/include /usr/jdk*/include /usr/local/jdk*/include /opt/j2sdk*/include /opt/jdk*/include /usr/java/include /usr/java/j2sdk*/include /usr/java/jdk*/include /usr/local/java/include /opt/java/include /usr/include/java /usr/local/include/java /usr/lib/java/include /usr/lib/jvm/java*/include /usr/include/kaffe /usr/local/include/kaffe /usr/include"                                                                             
  # Add in default installation directory on Windows for Cygwin              
  case $host in                                                              
  *-*-cygwin* | *-*-mingw*) JAVAINCDIR="c:/Program*Files/Java/jdk*/include d:/Program*Files/Java/jdk*/include c:/j2sdk*/include d:/j2sdk*/include c:/jdk*/include d:/jdk*/include $JAVAINCDIR";;
  *-*-darwin*) JAVAINCDIR="/System/Library/Frameworks/JavaVM.framework/Headers $JAVAINCDIR";;
  *);;                                                                       
  esac                                                                       
fi  


JAVAINC=""                                                                   
for d in $JAVAINCDIR ; do                                                    
  if test -r "$d/jni.h" ; then 
    AC_MSG_RESULT($d)
    JAVAINCDIR=$d
    JAVAINC=-I\"$d\"
    break
  fi
done

if test "$JAVAINC" = "" ; then
  AC_MSG_RESULT(not found)
else
  # now look for <arch>/jni_md.h
  AC_MSG_CHECKING(for java include file jni_md.h)
  JAVAMDDIR=`find "$JAVAINCDIR" -follow -name jni_md.h -print`
  if test "$JAVAMDDIR" = "" ; then
    AC_MSG_RESULT(not found)
  else
    JAVAMDDIR=`dirname "$JAVAMDDIR" | tail -n 1`
    JAVAINC="${JAVAINC} -I\"$JAVAMDDIR\""
    AC_MSG_RESULT($JAVAMDDIR)
  fi
fi
AC_SUBST([JAVAINC])


case $host in
   *-*-darwin*)
      JNI_PREFIX=lib
      JNI_SUFFIX=.jnilib ;;
   *-*-cygwin* | *-*-mingw*)
      JNI_PREFIX=
      JNI_SUFFIX=.dll ;;
   *)
      JNI_PREFIX=lib
      JNI_SUFFIX=.so ;;
esac
AC_SUBST([JNI_PREFIX])
AC_SUBST([JNI_SUFFIX])
AM_CONDITIONAL([NONSTD_JNI_PREFIX], [test "x$JNI_PREFIX" != xlib])

JAVACFLAGS="-Xlint:all,-serial -source 1.6 -target 1.6"
AC_SUBST([JAVACFLAGS])


AC_HEADER_STDC
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_CHECK_FUNCS([memset])
AC_CHECK_LIB(dl, dlopen)


# Install Device Adapter API library and headers
install_mmdevapi=false
# TODO reinstate this flag in some better form
#AC_ARG_ENABLE(inst-devapi,
#    [  --enable-inst-devapi    Install the Device Adapter API library and headers ],
#    [ install_mmdevapi=true ])
AM_CONDITIONAL([INSTALL_MMDEVAPI], [test x$install_mmdevapi = xtrue])

AC_MSG_CHECKING([for proprietary device adapter source])
AS_IF([test -f "$srcdir/SecretDeviceAdapters/configure"],
   [build_secretdeviceadapters=yes], [build_secretdeviceadapters=no])
AM_CONDITIONAL([BUILD_SECRETDEVICEADAPTERS],
   [test "x$build_secretdeviceadapters" = xyes])

AC_CONFIG_SUBDIRS([DeviceAdapters])
AS_IF([test "x$build_secretdeviceadapters" = xyes], [
   AC_CONFIG_SUBDIRS([SecretDeviceAdapters])
])
AC_CONFIG_SUBDIRS([DeviceKit])

AC_CONFIG_FILES(m4_strip([
   Makefile
   MMDevice/Makefile
   MMCore/Makefile
   MMCoreJ_wrap/Makefile
   MMCorePy_wrap/Makefile
   mmstudio/Makefile
   acqEngine/Makefile
   plugins/Makefile
   autofocus/Makefile
   scripts/Makefile
]))

AC_OUTPUT
