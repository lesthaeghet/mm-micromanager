<project name="mm.props">
	<!-- Path of repository root, from the project basedir -->
	<dirname property="mm.basedir" file="${ant.file.mm.props}/.."/>

	<!-- Extra tasks from ant-contrib -->
	<property name="mm.build.java.lib.ant-contrib" location="${mm.basedir}/dependencies/builddeps/ant-contrib-1.0b3.jar"/>
	<condition property="mm.build.ant-contrib-available">
		<resourceexists>
			<file file="${mm.build.java.lib.ant-contrib}"/>
		</resourceexists>
	</condition>
	<fail unless="mm.build.ant-contrib-available"
		message="Please run 'ant -f buildscripts/fetchdeps.xml' first. (If you get errors, try deleting the 'dependencies' directory and starting over.)"/>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${mm.build.java.lib.ant-contrib}"/>
		</classpath>
	</taskdef>

	<!-- Global definitions for building Micro-Manager -->

	<!-- This file should contain property, reference, and macro
	     definitions but no targets. Everything defined in this file should
	     have the "mm" prefix. -->

	<!-- Import OS environment variables -->
	<property environment="mm.env"/>

	<!-- Whether to skip nonessential components that don't build -->
	<property name="mm.build.failonerror" value="true"/>

	<!-- Whether to use Fiji-compatible directory structure -->
	<property name="mm.build.for.imagej2updater" value="false"/>

	<!-- Default build settings; can be overridden on command line -->
	<!-- TODO Provide reasonable defaults on Unix -->
	<property name="mm.platform" value="Windows"/>
	<property name="mm.configuration" value="Release"/>
	<property name="mm.architecture" value="x64"/>

	<!-- Users know about 32-bit vs 64-bit, not e.g. Win32 vs x64 -->
	<condition property="mm.architecture.bits" value="64" else="32">
		<or>
			<equals arg1="${mm.architecture}" arg2="x64"/> <!-- Windows -->
			<equals arg1="${mm.architecture}" arg2="x86_64"/> <!-- OS X, Linux -->
		</or>
	</condition>

	<!-- XXX Only Windows implemented -->
	<property name="mm.imagej2.architecture" value="win${mm.architecture.bits}"/>

	<!-- The JVM architecture on which the build is running -->
	<condition property="mm.build.architecture" value="x64" else="Win32">
		<!-- XXX Only Windows implemented -->
		<equals arg1="${os.arch}" arg2="amd64"/>
	</condition>

	<!-- For now, we are Windows-only, so always include windowsprops -->
	<include file="Ant/windowsprops.xml"/>

	<!-- Built Java library paths -->
	<property name="mm.java.lib.AntExtensions" location="${mm.java.outdir}/AntExtensions.jar"/>
	<property name="mm.java.lib.mmcorej" location="${mm.java.outdir}/MMCoreJ.jar"/>
	<property name="mm.java.lib.mmstudio" location="${mm.java.outdir}/MMJ_.jar"/>
	<property name="mm.java.lib.acq-engine" location="${mm.java.outdir}/MMAcqEngine.jar"/>

	<!-- Items not in source tree but at fixed location -->
	<property name="mm.thirdpartypublic" location="${mm.basedir}/../3rdpartypublic"/>

	<!-- Third-party lib paths -->
	<include file="javalibs.xml"/>

	<!-- Packages available by default from plugins -->
	<path id="mm.java.plugin.defaultclasspath">
		<pathelement location="${mm.java.lib.commons-math}"/>
		<pathelement location="${mm.java.lib.imagej}"/>
		<pathelement location="${mm.java.lib.mmcorej}"/>
		<pathelement location="${mm.java.lib.mmstudio}"/>
	</path>

	<!-- Compiling Java -->
	<presetdef name="mm-ant-javac">
		<javac debug="on" debuglevel="lines,vars,source"
			optimize="on" deprecation="on"
			source="1.5" target="1.5" includeAntRuntime="true">
			<compilerarg value="-Xlint"/>
		</javac>
	</presetdef>
	<presetdef name="mm-javac">
		<javac debug="on" debuglevel="lines,vars,source"
			optimize="on" deprecation="on"
			source="1.5" target="1.5" includeAntRuntime="false">
			<compilerarg value="-Xlint:all,-serial"/>
		</javac>
	</presetdef>

	<presetdef name="mm-jar">
		<jar compress="true" index="true" indexMetaInf="true"/>
	</presetdef>

	<macrodef name="mm-cljc">
		<attribute name="namespace"/>
		<attribute name="srcdir"/>
		<attribute name="destdir"/>
		<element name="clj-classpath" optional="false"/>
		<sequential>
			<java classname="clojure.lang.Compile" fork="true" failonerror="true">
				<arg value="@{namespace}"/>
				<sysproperty key="clojure.compile.path" value="@{destdir}"/>
				<sysproperty key="java.library.path" value="${mm.build.cpp.outdir}"/>
				<classpath>
					<pathelement location="@{destdir}"/>
					<pathelement location="@{srcdir}"/>
					<pathelement location="${mm.java.lib.clojure}"/>
					<clj-classpath/>
				</classpath>
			</java>
		</sequential>
	</macrodef>

	<!-- Compile a Java class for a Clojure project, but do not AOT compile
	     the Clojure source -->
	<macrodef name="mm-clj-genclass">
		<attribute name="namespace"/>
		<attribute name="genclass"/>
		<attribute name="srcdir"/>
		<attribute name="destdir"/>
		<element name="cljc-elements" implicit="true"/>
		<sequential>
			<!-- Convert "com.example.package.Class" to
			     "com/example/package/Class" -->
			<property name="genclass.classname" value="@{genclass}"/>
			<loadresource property="genclass.path">
				<propertyresource name="genclass.classname"/>
				<filterchain>
					<tokenfilter>
						<filetokenizer/>
						<replacestring from="." to="/"/>
					</tokenfilter>
				</filterchain>
			</loadresource>

			<tempfile property="genclass.tmpdir" destdir="${mm.intdir}" prefix="cljc"/>
			<mkdir dir="${genclass.tmpdir}"/>

			<mm-cljc namespace="@{namespace}" srcdir="@{srcdir}"
				destdir="${genclass.tmpdir}">
				<cljc-elements/>
			</mm-cljc>

			<!-- Copy the compiled Java class only -->
			<copy tofile="@{destdir}/${genclass.path}.class"
				file="${genclass.tmpdir}/${genclass.path}.class"/>

			<!-- Copy Clojure source files -->
			<copy todir="@{destdir}">
				<fileset dir="@{srcdir}" includes="**/*.clj"/>
			</copy>

			<delete dir="${genclass.tmpdir}"/>
		</sequential>
	</macrodef>
</project>
