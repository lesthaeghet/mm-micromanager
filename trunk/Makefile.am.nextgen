# This file is part of a progressive rewrite of the GNU (autotools) build
# scripts. Please do not modify this file. Instead, please modify the legacy
# build files (without the .nextgen suffix). Changes to legacy files will be
# automatically detected and manually applied to the next-gen files.
# - Mark Tsuchida
#
# %nextgen_build_filename = Makefile.am
# %nextgen_build_replaces = Makefile.am f2040eadf52e7b97cadb1d5a5dc6567c

AUTOMAKE_OPTIONS = foreign
ACLOCAL_AMFLAGS = -I m4

if BUILD_MMCORE
MMCORE_DIR = MMCore
endif

if BUILD_MMCOREJ
MMCOREJ_DIR = MMCoreJ_wrap
endif

if BUILD_MMCOREPY
MMCOREPY_DIR = MMCorePy_wrap
endif

if BUILD_SECRETDEVICEADAPTERS
SECRETDEVICEADAPTERS = SecretDeviceAdapters
endif


if BUILD_JAVA_APP

JAVA_APP_DIRS = mmstudio acqEngine autofocus plugins scripts
bin_SCRIPTS = buildscripts/launchers/micromanager
noinst_SCRIPTS = buildscripts/launchers/mmimagej

# TODO Define jardir in configure script (See other uses.)
jardir = $(pkgdatadir)/jars

buildscripts/launchers/micromanager: $(srcdir)/buildscripts/launchers/micromanager.in
	sed \
		-e 's%@pkglibdir[@]%$(pkglibdir)%g' \
		-e 's%@pkgdatadir[@]%$(pkgdatadir)%g' \
		-e 's%@jardir[@]%$(jardir)%g' \
		$(srcdir)/buildscripts/launchers/micromanager.in >$@

# Launcher as ImageJ plugin. For imagejdir, fall back to run time location of
# script if not set at build time. The shell variable imagejjar is set so as to
# account for the case where ij.jar is embedded within ImageJ.app on OS X.
buildscripts/launchers/mmimagej: $(srcdir)/buildscripts/launchers/mmimagej.in
	if test -z "$(imagejdir)"; then \
		imagejdir='`dirname $$0`'; \
		imagejjar='`dirname $$0`/ij.jar'; \
	else \
		imagejdir=$(imagejdir); \
		imagejjar=`find "$(imagejdir)" -name ij.jar | head -n 1`; \
	fi; \
	if test -z "$$imagejjar"; then \
		imagejjar="$(imagejdir)/ij.jar"; \
	fi; \
	sed \
		-e "s%@imagejdir[@]%$$imagejdir%g" \
		-e "s%@imagejjar[@]%$$imagejjar%g" \
		$(srcdir)/buildscripts/launchers/mmimagej.in >$@

endif # BUILD_JAVA_APP


if INSTALL_DEPENDENCY_JARS

install-data-hook:
	$(INSTALL) -d $(DESTDIR)$(jardir)
	for jar in $(CLASSEXT)/*.jar; do \
		$(INSTALL_DATA) -c $$jar $(DESTDIR)$(jardir); \
	done

endif # INSTALL_DEPENDENCY_JARS


CLEANFILES = buildscripts/launchers/micromanager buildscripts/launchers/mmimagej


# TODO: Building of DeviceAdapters could be made optional.
SUBDIRS = MMDevice $(MMCORE_DIR) $(MMCOREJ_DIR) $(MMCOREPY_DIR) $(JAVA_APP_DIRS) DeviceAdapters $(SECRETDEVICEADAPTERS) bindist


install-exec-hook:
	@echo "" 1>&2; \
	echo "##############################################################################" 1>&2; \
	echo "Micro-Manager has been installed in" 1>&2; \
	echo "$(prefix)" 1>&2; \
	echo "" 1>&2; \
	echo "You can run Micro-Manager by typing" 1>&2; \
	echo "$(bindir)/micromanager" 1>&2; \
	echo "##############################################################################" 1>&2; \
	echo "" 1>&2


# Install Micro-Manager into an existing ImageJ application folder, as an
# ImageJ plugin.
install-ijplugin:
	@if test -z "$(imagejdir)"; then \
		echo "ImageJ location not set." 1>&2; \
		echo "Use './configure --enable-imagej-plugin=DESTDIR'." 1>&2; \
		exit 1; \
	fi
	$(MAKE) pkglibdir=$(imagejdir) pkgdatadir=$(imagejdir) \
		jardir=$(imagejdir)/plugins/Micro-Manager \
		bindir=$(imagejdir) install
	rm -f $(DESTDIR)$(imagejdir)/*.la
	rm -f $(DESTDIR)$(imagejdir)/plugins/Micro-Manager/ij.jar
	rm -f $(DESTDIR)$(imagejdir)/micromanager
	$(INSTALL) buildscripts/launchers/mmimagej $(DESTDIR)$(imagejdir)
	@echo "" 1>&2; \
	echo "##############################################################################" 1>&2; \
	echo "Micro-Manager has been installed as an ImageJ plugin in" 1>&2; \
	echo "$(imagejdir)" 1>&2; \
	echo "" 1>&2; \
	echo "You can start Micro-Manager from the command line by typing" 1>&2; \
	echo "$(imagejdir)/mmimagej" 1>&2; \
	echo "or from the ImageJ menu (Plugins > Micro-Manager > Micro-Manager Studio)." 1>&2; \
	echo "##############################################################################" 1>&2; \
	echo "" 1>&2


dox:
	test -d $(srcdir)/doxygen/out/MMDevice || mkdir $(srcdir)/doxygen/out/MMDevice
	rm -rf $(srcdir)/doxygen/out/MMDevice/*
	doxygen doxygen/MMDevice
	test -d $(srcdir)/doxygen/out/MMCore || mkdir $(srcdir)/doxygen/out/MMCore
	rm -rf $(srcdir)/doxygen/out/MMCore/*
	doxygen doxygen/MMCore
