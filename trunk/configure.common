# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_LIBTOOL

OSNAME=`uname -s`

# GCC version
if test "x$GXX" = "xyes"; then
  AC_MSG_CHECKING([GNU compiler version])

  # Don't pass CXXFLAGS to the following CXX command as some
  # of them can't be specified along with '-v'.
  cc_version=["`$CXX -v 2>&1 </dev/null |grep 'gcc version' |\
          sed 's/.*gcc version \([-a-z0-9\.]*\).*/\1/'`"]
  AC_MSG_RESULT([$cc_version])

  # Some version numbers
  cc_vers_major=`echo $cc_version | cut -f1 -d.`
  cc_vers_minor=`echo $cc_version | cut -f2 -d.`
  cc_vers_patch=`echo $cc_version | cut -f3 -d.`
  test -n "$cc_vers_major" || cc_vers_major=0
  test -n "$cc_vers_minor" || cc_vers_minor=0
  test -n "$cc_vers_patch" || cc_vers_patch=0
  cc_vers_all=`expr $cc_vers_major '*' 1000000 + $cc_vers_minor '*' 1000 + $cc_vers_patch`

  if test $cc_vers_major -lt 3; then
    AC_MSG_ERROR([gcc >= 3.0 is needed to compile `])
  fi
fi 

# On linux, some gcc versions build shared libraries unusable in java when using
# the -O2 optimization.  Switch it off here:

if test $cc_vers_major -gt 3; then
   case $host in
      *-*-linux*) CXXFLAGS="-g -O";;
   esac
fi


#----------------------------------------------------------------
# LINKFORSHARED are the flags passed to the $(CC) command that links
# -- this is only needed for a few systems
#----------------------------------------------------------------
AC_MSG_CHECKING(LINKFORSHARED)
if test -z "$LINKFORSHARED"
then    
case $host in   
   *-*-aix*)   LINKFORSHARED='-Wl,-bE:$(srcdir)/python.exp -lld';;
   *-*-hp*) LINKFORSHARED="-Wl,-E -Wl,+s -Wl,+b\$(BINLIBDEST)/lib-dynload";;
   *-*-linux*) LINKFORSHARED="-Xlinker -export-dynamic";;
   *-*-next*) LINKFORSHARED="-u libsys_s";;
   *-sco-sysv*) LINKFORSHARED="-Bdynamic -dy -Wl,-Bexport";;                  
   *-*-irix6*) LINKFORSHARED="-all";;   esac
fi
AC_MSG_RESULT($LINKFORSHARED)
AC_SUBST(LINKFORSHARED)


#---------------------------------------------------
# Platform dependent flags
#---------------------------------------------------
LIBEXTA="a"
LIBEXTB="so"
case $host in
   *-*-linux*)
   LPTHREAD="-lpthread"
   DEVICEADAPTERPATH="/usr/lib/micro-manager"
   JARPATH="/usr/share/java"
   LIBEXTA="so"
   LIBEXTB="a"
   ;;
esac
AC_MSG_RESULT($LPTHREAD)
AC_SUBST(LPTHREAD)
AC_SUBST(LIBEXTA)
AC_SUBST(LIBEXTB)

# Specify architecture when building Universal Binaries on Mac
AC_ARG_ENABLE([arch], [AS_HELP_STRING([--enable-arch=arch],[Mac OS X only: ppc, i386, or x86_64])], [ARCH=$enableval], [ARCH=])

#----------------------------------------------------------------
# ImageJ
#----------------------------------------------------------------


# Determine if we need to look for ImageJ
AC_MSG_CHECKING(whether to build for imagej)
AC_ARG_WITH([imagej], [AS_HELP_STRING([--with-imagej=path],[path to ImageJ-based GUI])], [IMAGEJDIR="$withval"], [IMAGEJDIR="yes"])
AC_MSG_RESULT($IMAGEJDIR)

# Debian IJ settings
DEBIANIJ="/usr/share/java/ij.jar";
DEBIANIJPLUGIN="/usr/share/imagej";

AM_CONDITIONAL(BUILD_WITH_JAVA, test "$IMAGEJDIR" != "no")
if test "$IMAGEJDIR" != "no" ; then
   #----------------------------------------------------------------
   # Find ImageJ directory
   #----------------------------------------------------------------
   AC_MSG_CHECKING(for ImageJ directory)

   if test -z "$IMAGEJDIR"; then
      IMAGEJDIR="/Applications/ImageJ /usr/local/ImageJ /usr/local/imagej "
   fi
   IJPATH=""
   for d in $IMAGEJDIR ; do
     if test -d "$d" ; then
       AC_MSG_RESULT($d)
       IJPATH=$d
       break
     fi
   done

   if test -e "$DEBIANIJ"; then
     IJPATH="$DEBIANIJPLUGIN";
   fi

   if test "$IJPATH" = "" ; then
     AC_MSG_ERROR([not found, Use the without-imagej directive to build without ImageJ or install ImageJ (http://rsb.info.nih.gov/ij/ and rerun configure, possibly using the --with-imagej=path directive])
   fi


   #----------------------------------------------------------------
   # .so-directory
   #----------------------------------------------------------------
   if test -z "$DEVICEADAPTERPATH"; then
      DEVICEADAPTERPATH="$IJPATH"
   fi

   #----------------------------------------------------------------
   # .jar-directory
   #----------------------------------------------------------------
   if test -z "$JARPATH"; then
      JARPATH="$IJPATH/plugins/Micro-Manager"
   fi

fi


AC_SUBST(IJPATH)
AC_SUBST(DEVICEADAPTERPATH)
AC_SUBST(JARPATH)
AC_SUBST(OSNAME)

AC_MSG_CHECKING(device adapter path)
AC_MSG_RESULT($DEVICEADAPTERPATH)

AC_MSG_CHECKING(jar path)
AC_MSG_RESULT($JARPATH)
