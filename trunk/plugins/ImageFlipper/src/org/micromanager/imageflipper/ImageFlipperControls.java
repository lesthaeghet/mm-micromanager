/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImageFlipperControls.java
 *
 * Created on Feb 18, 2011, 9:57:34 PM
 */

package org.micromanager.imageflipper;

import mmcorej.TaggedImage;
import org.micromanager.MMStudioMainFrame;
import org.micromanager.api.DataProcessor;

/**
 *
 * @author arthur
 */
public class ImageFlipperControls extends javax.swing.JFrame {
   private final ImageFlippingProcessor processor_;

    /** Creates new form ImageFlipperControls */
    public ImageFlipperControls() {
        initComponents();
        setBackground(MMStudioMainFrame.getInstance().getBackgroundColor());
        MMStudioMainFrame.getInstance().addMMBackgroundListener(this);
        processor_ = new ImageFlippingProcessor(this);
    }

    public DataProcessor<TaggedImage> getProcessor() {
       return processor_;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        flipCheckBox = new javax.swing.JCheckBox();
        mirrorCheckBox = new javax.swing.JCheckBox();
        rotateCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Image Flipper");
        setBounds(new java.awt.Rectangle(300, 300, 150, 150));
        setMaximumSize(new java.awt.Dimension(200, 200));
        setMinimumSize(new java.awt.Dimension(150, 150));
        setPreferredSize(new java.awt.Dimension(150, 150));

        flipCheckBox.setText("Flip");
        flipCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flipCheckBoxActionPerformed(evt);
            }
        });

        mirrorCheckBox.setText("Mirror");
        mirrorCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mirrorCheckBoxActionPerformed(evt);
            }
        });

        rotateCheckBox.setText("Rotate");
        rotateCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateCheckBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(47, 47, 47)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(flipCheckBox)
                    .add(mirrorCheckBox)
                    .add(rotateCheckBox))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(flipCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(mirrorCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(rotateCheckBox)
                .addContainerGap(149, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void flipCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flipCheckBoxActionPerformed

    }//GEN-LAST:event_flipCheckBoxActionPerformed

    private void mirrorCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mirrorCheckBoxActionPerformed
       // TODO add your handling code here:
    }//GEN-LAST:event_mirrorCheckBoxActionPerformed

    private void rotateCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateCheckBoxActionPerformed
       // TODO add your handling code here:
    }//GEN-LAST:event_rotateCheckBoxActionPerformed


    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImageFlipperControls().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox flipCheckBox;
    private javax.swing.JCheckBox mirrorCheckBox;
    private javax.swing.JCheckBox rotateCheckBox;
    // End of variables declaration//GEN-END:variables

   public boolean getFlip() {
      return flipCheckBox.isSelected();
   }

   public boolean getMirror() {
      return mirrorCheckBox.isSelected();
   }

   public boolean getRotate() {
      return rotateCheckBox.isSelected();
   }

}
