/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CRISPFrame.java
 *
 * Created on Nov 15, 2011, 5:33:49 PM
 */

package org.micromanager.CRISP;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;
import javax.swing.SpinnerModel;
import mmcorej.CMMCore;
import mmcorej.DeviceType;
import org.micromanager.api.ScriptInterface;
import org.micromanager.utils.ReportingUtils;

/**
 *
 * @author Valelab
 */
public class CRISPFrame extends javax.swing.JFrame {

    private final ScriptInterface gui_;
    private final CMMCore core_;
    private Preferences prefs_;
    private String CRISP_;

    private int frameXPos_ = 100;
    private int frameYPos_ = 100;

    private static final String FRAMEXPOS = "FRAMEXPOS";
    private static final String FRAMEYPOS = "FRAMEYPOS";


    /** Creates new form CRISPFrame */
    public CRISPFrame(ScriptInterface gui)  {
       gui_ = gui;
       core_ = gui.getMMCore();
       prefs_ = Preferences.userNodeForPackage(this.getClass());
       CRISP_ = "";

       mmcorej.StrVector afs =
               core_.getLoadedDevicesOfType(DeviceType.AutoFocusDevice);
       boolean found = false;
       for (String af : afs) {
         try {
            if (core_.hasProperty(af, "Description")) {
               if (core_.getProperty(af, "Description").equals("ASI CRISP Autofocus adapter")) {
                  found = true;
                  CRISP_ = af;
               }
            }
         } catch (Exception ex) {
            Logger.getLogger(CRISPFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
       }

       if (!found) {
          gui_.showError("This plugin needs the ASI CRISP Autofcous");
          throw new IllegalArgumentException("This plugin needs at least one camera");
       }

      frameXPos_ = prefs_.getInt(FRAMEXPOS, frameXPos_);
      frameYPos_ = prefs_.getInt(FRAMEYPOS, frameYPos_);

      initComponents();

      setLocation(frameXPos_, frameYPos_);

      setBackground(gui_.getBackgroundColor());

      updateValues();
    }

    private void updateValues() {
       try {
         String val;
         val = core_.getProperty(CRISP_, "LED Intensity");
         int intVal = Integer.parseInt(val);
         LEDSpinner_.getModel().setValue(intVal);

         val = core_.getProperty(CRISP_, "GainMultiplier");
         intVal = Integer.parseInt(val);
         GainSpinner_.getModel().setValue(intVal);

         val = core_.getProperty(CRISP_, "Number of Averages");
         intVal = Integer.parseInt(val);
         NrAvgsSpinner_.getModel().setValue(intVal);

         val = core_.getProperty(CRISP_, "Objective NA");
         float floatVal = Float.parseFloat(val);
         NASpinner_.getModel().setValue(floatVal);
         
       } catch (Exception ex) {
          ReportingUtils.showError("Error reading values from CRISP");
       }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      LockButton_ = new javax.swing.JToggleButton();
      CalibrateButton_ = new javax.swing.JButton();
      CurveButton_ = new javax.swing.JButton();
      jSeparator1 = new javax.swing.JSeparator();
      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      jLabel3 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      LEDSpinner_ = new javax.swing.JSpinner();
      GainSpinner_ = new javax.swing.JSpinner();
      NrAvgsSpinner_ = new javax.swing.JSpinner();
      NASpinner_ = new javax.swing.JSpinner();
      UpdateButton_ = new javax.swing.JButton();
      SaveButton_ = new javax.swing.JButton();
      ResetOffsetButton_ = new javax.swing.JButton();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("ASI CRISP Control");

      LockButton_.setText("Lock");
      LockButton_.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            LockButton_ActionPerformed(evt);
         }
      });

      CalibrateButton_.setText("Calibrate");
      CalibrateButton_.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            CalibrateButton_ActionPerformed(evt);
         }
      });

      CurveButton_.setText("Focus Curve");
      CurveButton_.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            CurveButton_ActionPerformed(evt);
         }
      });

      jLabel1.setText("LED Int.");

      jLabel2.setText("Gain Multiplier");

      jLabel3.setText("Nr of Avgs");

      jLabel4.setText("NA");

      LEDSpinner_.setModel(new javax.swing.SpinnerNumberModel(50, 0, 100, 1));
      LEDSpinner_.setPreferredSize(new java.awt.Dimension(50, 20));
      LEDSpinner_.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            LEDSpinner_StateChanged(evt);
         }
      });

      GainSpinner_.setModel(new javax.swing.SpinnerNumberModel(10, 0, 100, 1));
      GainSpinner_.setPreferredSize(new java.awt.Dimension(50, 20));
      GainSpinner_.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            GainSpinner_StateChanged(evt);
         }
      });

      NrAvgsSpinner_.setModel(new javax.swing.SpinnerNumberModel(1, 0, 10, 1));
      NrAvgsSpinner_.setPreferredSize(new java.awt.Dimension(50, 20));
      NrAvgsSpinner_.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            NrAvgsSpinner_StateChanged(evt);
         }
      });

      NASpinner_.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.65f), Float.valueOf(0.0f), Float.valueOf(1.4f), Float.valueOf(0.05f)));
      NASpinner_.setPreferredSize(new java.awt.Dimension(50, 20));
      NASpinner_.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            NASpinner_StateChanged(evt);
         }
      });

      UpdateButton_.setText("Refresh");
      UpdateButton_.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            UpdateButton_ActionPerformed(evt);
         }
      });

      SaveButton_.setText("Save Calibration");

      ResetOffsetButton_.setText("Reset Offset");
      ResetOffsetButton_.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            ResetOffsetButton_ActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                     .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                           .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                              .addComponent(jLabel4)
                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                              .addComponent(NASpinner_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                           .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                              .addComponent(jLabel3)
                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                              .addComponent(NrAvgsSpinner_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                           .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                              .addComponent(jLabel2)
                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                              .addComponent(GainSpinner_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                           .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                              .addComponent(jLabel1)
                              .addGap(45, 45, 45)
                              .addComponent(LEDSpinner_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                           .addComponent(UpdateButton_, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                           .addComponent(SaveButton_, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                           .addComponent(ResetOffsetButton_, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                           .addComponent(CurveButton_, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))))
                  .addContainerGap())
               .addGroup(layout.createSequentialGroup()
                  .addComponent(LockButton_, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                  .addComponent(CalibrateButton_, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(25, 25, 25))))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(LockButton_)
               .addComponent(CalibrateButton_))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel1)
               .addComponent(LEDSpinner_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(UpdateButton_))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
               .addComponent(GainSpinner_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(SaveButton_))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
               .addComponent(NrAvgsSpinner_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(ResetOffsetButton_))
            .addGap(5, 5, 5)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
               .addComponent(NASpinner_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(CurveButton_))
            .addContainerGap())
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

    private void LockButton_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LockButton_ActionPerformed
       if ("Lock".equals(evt.getActionCommand())) {
          LockButton_.setText("Unlock");
          // lock the device
          try {
             core_.enableContinuousFocus(true);
          } catch (Exception ex) {
             ReportingUtils.displayNonBlockingMessage("Failed to lock");
          }

          LockButton_.setSelected(true);
       } else if ("Unlock".equals(evt.getActionCommand())) {
          LockButton_.setText("Lock");
          // unlock the device
          try {
             core_.enableContinuousFocus(false);
          } catch (Exception ex) {
             ReportingUtils.displayNonBlockingMessage("Failed to lock");
          }

          LockButton_.setSelected(false);
       }
    }//GEN-LAST:event_LockButton_ActionPerformed

    private void CalibrateButton_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalibrateButton_ActionPerformed
      try {
         core_.setProperty(CRISP_, "CRISP State", "loG_cal");

         String state = "";
         int counter = 0;
         while (!state.equals("loG_cal") && counter < 50) {
            state = core_.getProperty(CRISP_, "CRISP State");
            Thread.sleep(100);
         }
         Double snr = new Double(core_.getProperty(CRISP_, "Signal Noise Ratio"));

         if (snr < 2.0)
            ReportingUtils.showMessage("Signal Noise Ratio is smaller than 2.0.  " +
                    "Focus on your sample, increase LED intensity and try again.");

         core_.setProperty(CRISP_, "CRISP State", "Dither");

         String msg = "Note the middle number on the bottom of the display.  " +
                 "Adjust the detector lateral adjustment screw until the value is > 100, or" +
                 "< -100, and stable.  Then press OK.";
         JOptionPane.showMessageDialog(null, msg, "CRISP Calibration", JOptionPane.OK_OPTION);

         core_.setProperty(CRISP_, "CRISP State", "gain_Cal");

         counter = 0;
         while (!state.equals("Ready") && counter < 50) {
            state = core_.getProperty(CRISP_, "CRISP State");
            Thread.sleep(100);
         }

      } catch (Exception ex) {
         ReportingUtils.displayNonBlockingMessage("Calibration failed");
      }
    }//GEN-LAST:event_CalibrateButton_ActionPerformed

    private void LEDSpinner_StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_LEDSpinner_StateChanged
       SpinnerModel numberModel = LEDSpinner_.getModel();

       int newLEDValue = (Integer) numberModel.getValue();
       try {
          core_.setProperty(CRISP_, "LED Intensity", newLEDValue);
       } catch (Exception ex) {
          ReportingUtils.showError("Problem while setting LED intensity");
       }
    }//GEN-LAST:event_LEDSpinner_StateChanged

    private void UpdateButton_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButton_ActionPerformed
       updateValues();
    }//GEN-LAST:event_UpdateButton_ActionPerformed

    private void GainSpinner_StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_GainSpinner_StateChanged
       SpinnerModel numberModel = GainSpinner_.getModel();

       int newGainValue = (Integer) numberModel.getValue();
       try {
          core_.setProperty(CRISP_, "GainMultiplier", newGainValue);
       } catch (Exception ex) {
          ReportingUtils.showError("Problem while setting LED intensity");
       }
    }//GEN-LAST:event_GainSpinner_StateChanged

    private void NrAvgsSpinner_StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_NrAvgsSpinner_StateChanged
       SpinnerModel numberModel = NrAvgsSpinner_.getModel();

       int newNrAvgValue = (Integer) numberModel.getValue();
       try {
          core_.setProperty(CRISP_, "Number of Averages", newNrAvgValue);
       } catch (Exception ex) {
          ReportingUtils.showError("Problem while setting LED intensity");
       }
    }//GEN-LAST:event_NrAvgsSpinner_StateChanged

    private void NASpinner_StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_NASpinner_StateChanged
       SpinnerModel numberModel = NASpinner_.getModel();

       float newNAValue = (Float) numberModel.getValue();
       try {
          core_.setProperty(CRISP_, "Objective NA", newNAValue);
       } catch (Exception ex) {
          ReportingUtils.showError("Problem while setting LED intensity");
       }
    }//GEN-LAST:event_NASpinner_StateChanged

    private void ResetOffsetButton_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetOffsetButton_ActionPerformed
       try {
          core_.setProperty(CRISP_, "CRISP State", "Reset Focus Offset");
       } catch (Exception ex) {
          ReportingUtils.showError("Problem resetting Focus Offset");
       }
    }//GEN-LAST:event_ResetOffsetButton_ActionPerformed

    private void CurveButton_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CurveButton_ActionPerformed
       try {
          core_.enableContinuousFocus(false);
          // TODO: emulate pressing Zero button
          core_.setProperty(CRISP_, "Obtain Focus Curve", "Do it");
          String vals = core_.getProperty(CRISP_, "Focus Curve Data0");
          vals += core_.getProperty(CRISP_, "Focus Curve Data1");
          vals += core_.getProperty(CRISP_, "Focus Curve Data2");
          vals += core_.getProperty(CRISP_, "Focus Curve Data3");


          String[] valLines = vals.split("\r\n");
          float[] zVals = new float[valLines.length];
          int[] fes = new int[valLines.length];
          for (int i=0; i < valLines.length; i++) {
             // System.out.println(valLines[i]);
             String[] tokens = valLines[i].split("\\s+");
             zVals[i] = Float.parseFloat(tokens[2]);
             fes[i] = Integer.parseInt(tokens[3]);
             System.out.println(" " + i + " " + zVals[i] + " " + fes[i]);
          }
          //System.out.println(vals);

       } catch (Exception ex) {
          ReportingUtils.showError("Problem acquiring focus curve");
       }
    }//GEN-LAST:event_CurveButton_ActionPerformed

  public void safePrefs() {
      prefs_.putInt(FRAMEXPOS, this.getX());
      prefs_.putInt(FRAMEYPOS, this.getY());
   }


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton CalibrateButton_;
   private javax.swing.JButton CurveButton_;
   private javax.swing.JSpinner GainSpinner_;
   private javax.swing.JSpinner LEDSpinner_;
   private javax.swing.JToggleButton LockButton_;
   private javax.swing.JSpinner NASpinner_;
   private javax.swing.JSpinner NrAvgsSpinner_;
   private javax.swing.JButton ResetOffsetButton_;
   private javax.swing.JButton SaveButton_;
   private javax.swing.JButton UpdateButton_;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JSeparator jSeparator1;
   // End of variables declaration//GEN-END:variables

}
