///////////////////////////////////////////////////////////////////////////////
//FILE:          ProjectionControlForm.java
//PROJECT:       Micro-Manager
//SUBSYSTEM:     Projector plugin
//-----------------------------------------------------------------------------
//AUTHOR:        Arthur Edelstein
//COPYRIGHT:     University of California, San Francisco, 2010-2014
//LICENSE:       This file is distributed under the BSD license.
//               License text is included with the source distribution.
//               This file is distributed in the hope that it will be useful,
//               but WITHOUT ANY WARRANTY; without even the implied warranty
//               of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//               IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//               CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//               INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES.

package org.micromanager.projector;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.prefs.Preferences;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;
import javax.swing.text.DefaultFormatter;
import mmcorej.CMMCore;
import mmcorej.DeviceType;
import org.micromanager.api.ScriptInterface;
import org.micromanager.utils.GUIUtils;
import org.micromanager.utils.MMListenerAdapter;

/**
 *
 * @author arthur
 */
public class ProjectorControlForm extends javax.swing.JFrame implements OnStateListener  {

   private final CMMCore core_;
   private final ProjectorController controller_;
   private final ScriptInterface app_;
   private int numROIs_;
   private boolean isSLM_;

   /**
    * Creates new form ProjectorControlForm
    */
   public ProjectorControlForm(ProjectorController controller, CMMCore core, ScriptInterface app) {
      initComponents();
      // Place window where it was last.
      GUIUtils.recallPosition(this);
      controller_ = controller;
      core_ = core;
      app_ = app;
      isSLM_ = controller_.isSLM();
      // Only an SLM (not a galvo) has pixels.
      allPixelsButton.setVisible(isSLM_);
      // No point in looping ROIs on an SLM.
      roiLoopSpinner.setVisible(!isSLM_);
      roiLoopLabel.setVisible(!isSLM_);
      roiLoopTimesLabel.setVisible(!isSLM_);
      pointAndShootOffButton.setSelected(true);
      updateROISettings();
      populateChannelComboBox(Preferences.userNodeForPackage(this.getClass()).get("channel", ""));
      populateShutterComboBox(Preferences.userNodeForPackage(this.getClass()).get("shutter", ""));
      this.addWindowFocusListener(new WindowAdapter() {
          public void windowGainedFocus(WindowEvent e) {
              populateChannelComboBox(null);
              populateShutterComboBox(null);
          }
      });
      
      commitSpinnerOnValidEdit(pointAndShootIntervalSpinner);
      commitSpinnerOnValidEdit(startFrameSpinner);
      commitSpinnerOnValidEdit(repeatEveryFrameSpinner);
      commitSpinnerOnValidEdit(roiLoopSpinner);
      
      sequencingButton.setVisible(MosaicSequencingFrame.getMosaicDevices(core).size() > 0);
     
      app_.addMMListener(new MMListenerAdapter() {
         @Override
         public void slmExposureChanged(String deviceName, double exposure) {
            if (deviceName.equals(controller_.getDeviceName())) {
               pointAndShootIntervalSpinner.setValue(exposure * 1000);
            }
         }
      });

   }

   /*
    * Makes a JSpinner fire a change event reflecting the new value
    * whenver user types a valid entry. Why the hell isn't that the default setting?
    */
   private static void commitSpinnerOnValidEdit(final JSpinner spinner) {
      ((DefaultFormatter) ((JSpinner.DefaultEditor) spinner.getEditor())
            .getTextField().getFormatter()).setCommitsOnValidEdit(true);
   }
   
   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      onButton = new javax.swing.JButton();
      mainTabbedPane = new javax.swing.JTabbedPane();
      pointAndShootTab = new javax.swing.JPanel();
      jLabel1 = new javax.swing.JLabel();
      pointAndShootOnButton = new javax.swing.JToggleButton();
      pointAndShootOffButton = new javax.swing.JToggleButton();
      jLabel3 = new javax.swing.JLabel();
      roisTab = new javax.swing.JPanel();
      roiLoopLabel = new javax.swing.JLabel();
      roiLoopTimesLabel = new javax.swing.JLabel();
      setRoiButton = new javax.swing.JButton();
      runROIsNowButton = new javax.swing.JButton();
      roiLoopSpinner = new javax.swing.JSpinner();
      repeatCheckBox = new javax.swing.JCheckBox();
      startFrameLabel = new javax.swing.JLabel();
      startFrameSpinner = new javax.swing.JSpinner();
      repeatEveryFrameSpinner = new javax.swing.JSpinner();
      framesLabel = new javax.swing.JLabel();
      jSeparator1 = new javax.swing.JSeparator();
      useInMDAcheckBox = new javax.swing.JCheckBox();
      roiStatusLabel = new javax.swing.JLabel();
      jButton1 = new javax.swing.JButton();
      jSeparator3 = new javax.swing.JSeparator();
      sequencingButton = new javax.swing.JButton();
      setupTab = new javax.swing.JPanel();
      calibrateButton = new javax.swing.JButton();
      allPixelsButton = new javax.swing.JButton();
      centerButton = new javax.swing.JButton();
      channelComboBox = new javax.swing.JComboBox();
      jLabel4 = new javax.swing.JLabel();
      shutterComboBox = new javax.swing.JComboBox();
      jLabel5 = new javax.swing.JLabel();
      offButton = new javax.swing.JButton();
      closeShutterLabel = new javax.swing.JLabel();
      pointAndShootIntervalSpinner = new javax.swing.JSpinner();
      jLabel2 = new javax.swing.JLabel();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("Projector Controls");
      setResizable(false);

      onButton.setText("On");
      onButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            onButtonActionPerformed(evt);
         }
      });

      mainTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            mainTabbedPaneStateChanged(evt);
         }
      });

      jLabel1.setText("Point and shoot mode:");

      pointAndShootOnButton.setText("On");
      pointAndShootOnButton.setMaximumSize(new java.awt.Dimension(75, 23));
      pointAndShootOnButton.setMinimumSize(new java.awt.Dimension(75, 23));
      pointAndShootOnButton.setPreferredSize(new java.awt.Dimension(75, 23));
      pointAndShootOnButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            pointAndShootOnButtonActionPerformed(evt);
         }
      });

      pointAndShootOffButton.setText("Off");
      pointAndShootOffButton.setPreferredSize(new java.awt.Dimension(75, 23));
      pointAndShootOffButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            pointAndShootOffButtonActionPerformed(evt);
         }
      });

      jLabel3.setText("(To phototarget, Control + click on the image.)");

      org.jdesktop.layout.GroupLayout pointAndShootTabLayout = new org.jdesktop.layout.GroupLayout(pointAndShootTab);
      pointAndShootTab.setLayout(pointAndShootTabLayout);
      pointAndShootTabLayout.setHorizontalGroup(
         pointAndShootTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(pointAndShootTabLayout.createSequentialGroup()
            .add(25, 25, 25)
            .add(pointAndShootTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(pointAndShootTabLayout.createSequentialGroup()
                  .add(jLabel1)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                  .add(pointAndShootOnButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                  .add(pointAndShootOffButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
               .add(jLabel3))
            .addContainerGap(179, Short.MAX_VALUE))
      );
      pointAndShootTabLayout.setVerticalGroup(
         pointAndShootTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(pointAndShootTabLayout.createSequentialGroup()
            .add(43, 43, 43)
            .add(pointAndShootTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jLabel1)
               .add(pointAndShootOnButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(pointAndShootOffButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(18, 18, 18)
            .add(jLabel3)
            .addContainerGap(140, Short.MAX_VALUE))
      );

      mainTabbedPane.addTab("Point and Shoot", pointAndShootTab);

      roiLoopLabel.setText("Loop:");

      roiLoopTimesLabel.setText("times");

      setRoiButton.setText("Set ROI(s)");
      setRoiButton.setToolTipText("Specify an ROI you wish to be phototargeted by using the ImageJ ROI tools (point, rectangle, oval, polygon). Then press Set ROI(s) to send the ROIs to the phototargeting device. To initiate phototargeting, press Go!");
      setRoiButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            setRoiButtonActionPerformed(evt);
         }
      });

      runROIsNowButton.setText("Run ROIs now!");
      runROIsNowButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            runROIsNowButtonActionPerformed(evt);
         }
      });

      roiLoopSpinner.setModel(new SpinnerNumberModel(1, 1, 1000000000, 1));
      roiLoopSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            roiLoopSpinnerStateChanged(evt);
         }
      });

      repeatCheckBox.setText("Repeat every");
      repeatCheckBox.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            repeatCheckBoxActionPerformed(evt);
         }
      });

      startFrameLabel.setText("Start Frame");

      startFrameSpinner.setModel(new SpinnerNumberModel(1, 1, 1000000000, 1));
      startFrameSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            startFrameSpinnerStateChanged(evt);
         }
      });

      repeatEveryFrameSpinner.setModel(new SpinnerNumberModel(1, 1, 1000000000, 1));
      repeatEveryFrameSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            repeatEveryFrameSpinnerStateChanged(evt);
         }
      });

      framesLabel.setText("frames");

      useInMDAcheckBox.setText("Run ROIs in Multi-Dimensional Acquisition");
      useInMDAcheckBox.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            useInMDAcheckBoxActionPerformed(evt);
         }
      });

      roiStatusLabel.setText("No ROIs submitted yet");

      jButton1.setText("ROI Manager >>");
      jButton1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
         }
      });

      jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

      sequencingButton.setText("Sequencing...");
      sequencingButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            sequencingButtonActionPerformed(evt);
         }
      });

      org.jdesktop.layout.GroupLayout roisTabLayout = new org.jdesktop.layout.GroupLayout(roisTab);
      roisTab.setLayout(roisTabLayout);
      roisTabLayout.setHorizontalGroup(
         roisTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(roisTabLayout.createSequentialGroup()
            .add(25, 25, 25)
            .add(roisTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(roisTabLayout.createSequentialGroup()
                  .add(roiStatusLabel)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .add(sequencingButton))
               .add(roisTabLayout.createSequentialGroup()
                  .add(setRoiButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .add(jButton1)))
            .add(24, 24, 24))
         .add(roisTabLayout.createSequentialGroup()
            .addContainerGap()
            .add(roisTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(roisTabLayout.createSequentialGroup()
                  .add(10, 10, 10)
                  .add(runROIsNowButton)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                  .add(jSeparator3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .add(15, 15, 15)
                  .add(roisTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(roisTabLayout.createSequentialGroup()
                        .add(29, 29, 29)
                        .add(roisTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                           .add(roisTabLayout.createSequentialGroup()
                              .add(startFrameLabel)
                              .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                              .add(startFrameSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                           .add(roisTabLayout.createSequentialGroup()
                              .add(repeatCheckBox)
                              .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                              .add(repeatEveryFrameSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                              .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                              .add(framesLabel))))
                     .add(useInMDAcheckBox))
                  .add(0, 0, Short.MAX_VALUE))
               .add(roisTabLayout.createSequentialGroup()
                  .add(jSeparator1)
                  .addContainerGap())
               .add(roisTabLayout.createSequentialGroup()
                  .add(15, 15, 15)
                  .add(roiLoopLabel)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                  .add(roiLoopSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                  .add(roiLoopTimesLabel)
                  .add(107, 349, Short.MAX_VALUE))))
      );
      roisTabLayout.setVerticalGroup(
         roisTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(roisTabLayout.createSequentialGroup()
            .add(21, 21, 21)
            .add(roisTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(setRoiButton)
               .add(jButton1))
            .add(18, 18, 18)
            .add(roisTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(roiStatusLabel)
               .add(sequencingButton))
            .add(18, 18, 18)
            .add(roisTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(roiLoopLabel)
               .add(roiLoopTimesLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(roiLoopSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(roisTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(jSeparator3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(roisTabLayout.createSequentialGroup()
                  .add(6, 6, 6)
                  .add(roisTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(runROIsNowButton)
                     .add(roisTabLayout.createSequentialGroup()
                        .add(useInMDAcheckBox)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(roisTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                           .add(startFrameLabel)
                           .add(startFrameSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(roisTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                           .add(repeatCheckBox)
                           .add(repeatEveryFrameSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                           .add(framesLabel))))))
            .addContainerGap(12, Short.MAX_VALUE))
      );

      mainTabbedPane.addTab("ROIs", roisTab);

      calibrateButton.setText("Calibrate!");
      calibrateButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            calibrateButtonActionPerformed(evt);
         }
      });

      allPixelsButton.setText("All Pixels");
      allPixelsButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            allPixelsButtonActionPerformed(evt);
         }
      });

      centerButton.setText("Show center spot");
      centerButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            centerButtonActionPerformed(evt);
         }
      });

      channelComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
      channelComboBox.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            channelComboBoxActionPerformed(evt);
         }
      });

      jLabel4.setText("Phototargeting channel:");

      shutterComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
      shutterComboBox.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            shutterComboBoxActionPerformed(evt);
         }
      });

      jLabel5.setText("Phototargeting shutter:");

      org.jdesktop.layout.GroupLayout setupTabLayout = new org.jdesktop.layout.GroupLayout(setupTab);
      setupTab.setLayout(setupTabLayout);
      setupTabLayout.setHorizontalGroup(
         setupTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(setupTabLayout.createSequentialGroup()
            .add(39, 39, 39)
            .add(setupTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(setupTabLayout.createSequentialGroup()
                  .add(centerButton)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(allPixelsButton))
               .add(setupTabLayout.createSequentialGroup()
                  .add(setupTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(jLabel4)
                     .add(jLabel5))
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(setupTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(shutterComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                     .add(channelComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
               .add(calibrateButton))
            .addContainerGap(197, Short.MAX_VALUE))
      );
      setupTabLayout.setVerticalGroup(
         setupTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(setupTabLayout.createSequentialGroup()
            .add(27, 27, 27)
            .add(setupTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(centerButton)
               .add(allPixelsButton))
            .add(18, 18, 18)
            .add(calibrateButton)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 18, Short.MAX_VALUE)
            .add(setupTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jLabel4)
               .add(channelComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(setupTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(shutterComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(jLabel5))
            .add(83, 83, 83))
      );

      mainTabbedPane.addTab("Setup", setupTab);

      offButton.setText("Off");
      offButton.setSelected(true);
      offButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            offButtonActionPerformed(evt);
         }
      });

      closeShutterLabel.setText("Exposure time:");

      pointAndShootIntervalSpinner.setModel(new SpinnerNumberModel(500, 1, 1000000000, 1));
      pointAndShootIntervalSpinner.setMaximumSize(new java.awt.Dimension(75, 20));
      pointAndShootIntervalSpinner.setMinimumSize(new java.awt.Dimension(75, 20));
      pointAndShootIntervalSpinner.setPreferredSize(new java.awt.Dimension(75, 20));
      pointAndShootIntervalSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            pointAndShootIntervalSpinnerStateChanged(evt);
         }
      });
      pointAndShootIntervalSpinner.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
         public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
            pointAndShootIntervalSpinnerVetoableChange(evt);
         }
      });

      jLabel2.setText("ms");

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(mainTabbedPane)
               .add(layout.createSequentialGroup()
                  .add(closeShutterLabel)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                  .add(pointAndShootIntervalSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .add(18, 18, 18)
                  .add(jLabel2)
                  .add(65, 65, 65)
                  .add(onButton)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(offButton)
                  .add(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(onButton)
               .add(offButton)
               .add(pointAndShootIntervalSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(closeShutterLabel)
               .add(jLabel2))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(mainTabbedPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 266, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(20, Short.MAX_VALUE))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

    private void calibrateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calibrateButtonActionPerformed
       boolean running = controller_.isCalibrating();
       if (running) {
           controller_.stopCalibration();
           calibrateButton.setText("Calibrate");
       } else {
           controller_.calibrate();
           calibrateButton.setText("Stop calibration");
       }
    }//GEN-LAST:event_calibrateButtonActionPerformed

    private void onButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onButtonActionPerformed
       controller_.turnOn();
       offButton.setSelected(false);
       onButton.setSelected(true);
       pointAndShootOffButtonActionPerformed(null);
    }//GEN-LAST:event_onButtonActionPerformed

    private void offButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_offButtonActionPerformed
       controller_.turnOff();
       offButton.setSelected(true);
       onButton.setSelected(false);
    }//GEN-LAST:event_offButtonActionPerformed

    private void allPixelsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allPixelsButtonActionPerformed
       controller_.activateAllPixels();
    }//GEN-LAST:event_allPixelsButtonActionPerformed

   private void mainTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mainTabbedPaneStateChanged
      if (controller_ != null) {
         pointAndShootOnButton.setSelected(false);
         pointAndShootOffButton.setSelected(true);
         updatePointAndShoot();
      }
   }//GEN-LAST:event_mainTabbedPaneStateChanged

   private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      ProjectorPlugin.showRoiManager();
   }//GEN-LAST:event_jButton1ActionPerformed

   private void useInMDAcheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useInMDAcheckBoxActionPerformed
      updateROISettings();
   }//GEN-LAST:event_useInMDAcheckBoxActionPerformed

   private void repeatCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repeatCheckBoxActionPerformed
      controller_.setRoiRepetitions(repeatCheckBox.isSelected()
         ? getRoiRepetitionsSetting() : 0);
      updateROISettings();
   }//GEN-LAST:event_repeatCheckBoxActionPerformed

   private void roiLoopSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_roiLoopSpinnerStateChanged
      controller_.setRoiRepetitions(getRoiRepetitionsSetting());
   }//GEN-LAST:event_roiLoopSpinnerStateChanged

   private void runROIsNowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runROIsNowButtonActionPerformed
      controller_.runPolygons();
   }//GEN-LAST:event_runROIsNowButtonActionPerformed

   private void setRoiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setRoiButtonActionPerformed
      numROIs_ = controller_.setRois(getRoiRepetitionsSetting());
      this.updateROISettings();
   }//GEN-LAST:event_setRoiButtonActionPerformed

   private void centerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_centerButtonActionPerformed
      offButtonActionPerformed(null);
      controller_.moveToCenter();
   }//GEN-LAST:event_centerButtonActionPerformed

   private void pointAndShootOffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointAndShootOffButtonActionPerformed
      pointAndShootOnButton.setSelected(false);
      pointAndShootOffButton.setSelected(true);
      updatePointAndShoot();
   }//GEN-LAST:event_pointAndShootOffButtonActionPerformed

   private void pointAndShootOnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointAndShootOnButtonActionPerformed
      pointAndShootOnButton.setSelected(true);
      pointAndShootOffButton.setSelected(false);
      offButtonActionPerformed(null);
      updatePointAndShoot();
   }//GEN-LAST:event_pointAndShootOnButtonActionPerformed

   private void pointAndShootIntervalSpinnerVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_pointAndShootIntervalSpinnerVetoableChange
      updateExposure();
   }//GEN-LAST:event_pointAndShootIntervalSpinnerVetoableChange

   private void pointAndShootIntervalSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pointAndShootIntervalSpinnerStateChanged
   updateExposure();
   }//GEN-LAST:event_pointAndShootIntervalSpinnerStateChanged

   private void repeatEveryFrameSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_repeatEveryFrameSpinnerStateChanged
      updateROISettings();
   }//GEN-LAST:event_repeatEveryFrameSpinnerStateChanged

   private void startFrameSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startFrameSpinnerStateChanged
      updateROISettings();
   }//GEN-LAST:event_startFrameSpinnerStateChanged

    private void channelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_channelComboBoxActionPerformed
       final String channel = (String) channelComboBox.getSelectedItem();
       controller_.setTargetingChannel(channel);
       if (channel != null) {
          Preferences.userNodeForPackage(this.getClass()).put("channel", channel);
       }
    }//GEN-LAST:event_channelComboBoxActionPerformed

   private void sequencingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sequencingButtonActionPerformed
      controller_.showMosaicSequencingFrame();
   }//GEN-LAST:event_sequencingButtonActionPerformed

   private void shutterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shutterComboBoxActionPerformed
      final String shutter = (String) shutterComboBox.getSelectedItem();
      controller_.setTargetingShutter(shutter);
      if (shutter != null) {
         Preferences.userNodeForPackage(this.getClass()).put("shutter", shutter);
      }
   }//GEN-LAST:event_shutterComboBoxActionPerformed

   private int getRoiRepetitionsSetting() {
      return getSpinnerValue(roiLoopSpinner);
   }

   private int getSpinnerValue(JSpinner spinner) {
      return Integer.parseInt(spinner.getValue().toString());
   }

   public void updatePointAndShoot() {
      controller_.enablePointAndShootMode(pointAndShootOnButton.isSelected());
   }

   public void dispose() {
      super.dispose();
   }
  
   public void updateROISettings() {
      boolean roisSubmitted = false;
      if (numROIs_ == 0) {
         roiStatusLabel.setText("No ROIs submitted");
         roisSubmitted = false;
      } else if (numROIs_ == 1) {
         roiStatusLabel.setText("One ROI submitted");
         roisSubmitted = true;
      } else { // numROIs_ > 1
         roiStatusLabel.setText("" + numROIs_ + " ROIs submitted");
         roisSubmitted = true;
      }

      roiLoopLabel.setEnabled(roisSubmitted);
      roiLoopSpinner.setEnabled(!isSLM_ && roisSubmitted);
      roiLoopTimesLabel.setEnabled(!isSLM_ && roisSubmitted);
      runROIsNowButton.setEnabled(roisSubmitted);
      useInMDAcheckBox.setEnabled(roisSubmitted);

      boolean useInMDA = roisSubmitted && useInMDAcheckBox.isSelected();
      startFrameLabel.setEnabled(useInMDA);
      startFrameSpinner.setEnabled(useInMDA);
      repeatCheckBox.setEnabled(useInMDA);

      boolean repeatInMDA = useInMDA && repeatCheckBox.isSelected();
      repeatEveryFrameSpinner.setEnabled(repeatInMDA);
      framesLabel.setEnabled(repeatInMDA);
      
      if (useInMDAcheckBox.isSelected()) {
         controller_.removeFromMDA();
         controller_.attachToMDA(getSpinnerValue(this.startFrameSpinner) - 1,
            this.repeatCheckBox.isSelected(),
            getSpinnerValue(this.repeatEveryFrameSpinner));
      } else {
         controller_.removeFromMDA();
      }
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton allPixelsButton;
   private javax.swing.JButton calibrateButton;
   private javax.swing.JButton centerButton;
   private javax.swing.JComboBox channelComboBox;
   private javax.swing.JLabel closeShutterLabel;
   private javax.swing.JLabel framesLabel;
   private javax.swing.JButton jButton1;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JSeparator jSeparator3;
   private javax.swing.JTabbedPane mainTabbedPane;
   private javax.swing.JButton offButton;
   private javax.swing.JButton onButton;
   private javax.swing.JSpinner pointAndShootIntervalSpinner;
   private javax.swing.JToggleButton pointAndShootOffButton;
   private javax.swing.JToggleButton pointAndShootOnButton;
   private javax.swing.JPanel pointAndShootTab;
   private javax.swing.JCheckBox repeatCheckBox;
   private javax.swing.JSpinner repeatEveryFrameSpinner;
   private javax.swing.JLabel roiLoopLabel;
   private javax.swing.JSpinner roiLoopSpinner;
   private javax.swing.JLabel roiLoopTimesLabel;
   private javax.swing.JLabel roiStatusLabel;
   private javax.swing.JPanel roisTab;
   private javax.swing.JButton runROIsNowButton;
   private javax.swing.JButton sequencingButton;
   private javax.swing.JButton setRoiButton;
   private javax.swing.JPanel setupTab;
   private javax.swing.JComboBox shutterComboBox;
   private javax.swing.JLabel startFrameLabel;
   private javax.swing.JSpinner startFrameSpinner;
   private javax.swing.JCheckBox useInMDAcheckBox;
   // End of variables declaration//GEN-END:variables

   public void turnedOn() {
      SwingUtilities.invokeLater(new Runnable() {
         public void run() {
            onButton.setSelected(true);
            offButton.setSelected(false);
         }
      });
   }

   public void turnedOff() {
      SwingUtilities.invokeLater(new Runnable() {
         public void run() {
            onButton.setSelected(false);
            offButton.setSelected(true);
         }
      });
   }

   void populateChannelComboBox(String initialChannel) {
      if (initialChannel == null) {
         initialChannel = (String) channelComboBox.getSelectedItem();
      }
      channelComboBox.removeAllItems();
      channelComboBox.addItem("");
      for (String preset : core_.getAvailableConfigs(core_.getChannelGroup())) {
         channelComboBox.addItem(preset);
      }
      channelComboBox.setSelectedItem(initialChannel);
   }

   void populateShutterComboBox(String initialShutter) {
      if (initialShutter == null) {
         initialShutter = (String) shutterComboBox.getSelectedItem();
      }
      shutterComboBox.removeAllItems();
      shutterComboBox.addItem("");
      for (String shutter : core_.getLoadedDevicesOfType(DeviceType.ShutterDevice)) {
         shutterComboBox.addItem(shutter);
      }
      shutterComboBox.setSelectedItem(initialShutter);
   }

   @Override
   public void calibrationDone() {
      calibrateButton.setText("Calibrate");
   }

   private void updateExposure() {
       controller_.setExposure(1000 * Double.parseDouble(this.pointAndShootIntervalSpinner.getValue().toString()));
   }



}
