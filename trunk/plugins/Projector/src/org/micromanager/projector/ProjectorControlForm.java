/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ProjectorControlForm.java
 *
 * Created on Apr 3, 2010, 12:37:36 PM
 */
package org.micromanager.projector;

import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;
import org.micromanager.utils.GUIUtils;

/**
 *
 * @author arthur
 */
public class ProjectorControlForm extends javax.swing.JFrame implements OnStateListener {

   private final ProjectorController controller_;
   private final ProjectorPlugin plugin_;
   private int numROIs_;

   /**
    * Creates new form ProjectorControlForm
    */
   public ProjectorControlForm(ProjectorPlugin plugin, ProjectorController controller) {
      initComponents();
      plugin_ = plugin;
      controller_ = controller;
      allPixelsButton.setEnabled(controller_.isSLM());
      GUIUtils.recallPosition(this);
      pointAndShootOffButton.setSelected(true);
      updateWidgetsEnabledStatus();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      calibrateButton = new javax.swing.JButton();
      onButton = new javax.swing.JButton();
      offButton = new javax.swing.JButton();
      jTabbedPane1 = new javax.swing.JTabbedPane();
      jPanel1 = new javax.swing.JPanel();
      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      pointAndShootIntervalSpinner = new javax.swing.JSpinner();
      pointAndShootOnButton = new javax.swing.JToggleButton();
      pointAndShootOffButton = new javax.swing.JToggleButton();
      closeShutterLabel = new javax.swing.JLabel();
      centerButton = new javax.swing.JButton();
      jPanel3 = new javax.swing.JPanel();
      roiLoopLabel = new javax.swing.JLabel();
      roiLoopTimesLabel = new javax.swing.JLabel();
      setRoiButton = new javax.swing.JButton();
      runROIsNowButton = new javax.swing.JButton();
      roiLoopSpinner = new javax.swing.JSpinner();
      repeatCheckBox = new javax.swing.JCheckBox();
      startFrameLabel = new javax.swing.JLabel();
      startFrameSpinner = new javax.swing.JSpinner();
      repeatEveryFrameSpinner = new javax.swing.JSpinner();
      framesLabel = new javax.swing.JLabel();
      jSeparator1 = new javax.swing.JSeparator();
      useInMDAcheckBox = new javax.swing.JCheckBox();
      roiStatusLabel = new javax.swing.JLabel();
      jSeparator2 = new javax.swing.JSeparator();
      allPixelsButton = new javax.swing.JButton();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("Projector Controls");
      setResizable(false);

      calibrateButton.setText("Calibrate");
      calibrateButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            calibrateButtonActionPerformed(evt);
         }
      });

      onButton.setText("On");
      onButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            onButtonActionPerformed(evt);
         }
      });

      offButton.setText("Off");
      offButton.setSelected(true);
      offButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            offButtonActionPerformed(evt);
         }
      });

      jLabel1.setText("Point and shoot mode:");

      jLabel2.setText("ms");

      pointAndShootIntervalSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            pointAndShootIntervalSpinnerStateChanged(evt);
         }
      });
      pointAndShootIntervalSpinner.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
         public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
            pointAndShootIntervalSpinnerVetoableChange(evt);
         }
      });

      pointAndShootOnButton.setText("On");
      pointAndShootOnButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            pointAndShootOnButtonActionPerformed(evt);
         }
      });

      pointAndShootOffButton.setText("Off");
      pointAndShootOffButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            pointAndShootOffButtonActionPerformed(evt);
         }
      });

      closeShutterLabel.setText("Close shutter after");

      centerButton.setText("Show galvo center");
      centerButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            centerButtonActionPerformed(evt);
         }
      });

      org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(jPanel1Layout.createSequentialGroup()
                  .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                     .add(jLabel1)
                     .add(closeShutterLabel))
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                  .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(jPanel1Layout.createSequentialGroup()
                        .add(pointAndShootOnButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(pointAndShootOffButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                     .add(jPanel1Layout.createSequentialGroup()
                        .add(pointAndShootIntervalSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 63, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel2)
                        .add(20, 20, 20))))
               .add(jPanel1Layout.createSequentialGroup()
                  .add(17, 17, 17)
                  .add(centerButton)
                  .add(86, 86, 86)))
            .add(32, 32, 32))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPanel1Layout.createSequentialGroup()
            .add(25, 25, 25)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jLabel1)
               .add(pointAndShootOnButton)
               .add(pointAndShootOffButton))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(jLabel2)
               .add(pointAndShootIntervalSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(closeShutterLabel))
            .add(18, 18, 18)
            .add(centerButton)
            .addContainerGap(176, Short.MAX_VALUE))
      );

      jTabbedPane1.addTab("Point and Shoot", jPanel1);

      roiLoopLabel.setText("Loop:");

      roiLoopTimesLabel.setText("times");

      setRoiButton.setText("Set ROI(s)");
      setRoiButton.setToolTipText("Specify an ROI you wish to be phototargeted by using the ImageJ ROI tools (point, rectangle, oval, polygon). Then press Set ROI(s) to send the ROIs to the phototargeting device. To initiate phototargeting, press Go!");
      setRoiButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            setRoiButtonActionPerformed(evt);
         }
      });

      runROIsNowButton.setText("Run ROIs now!");
      runROIsNowButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            runROIsNowButtonActionPerformed(evt);
         }
      });

      roiLoopSpinner.setModel(new SpinnerNumberModel(1, 1, 1000000000, 1));
      roiLoopSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            roiLoopSpinnerStateChanged(evt);
         }
      });

      repeatCheckBox.setText("Repeat every");
      repeatCheckBox.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            repeatCheckBoxActionPerformed(evt);
         }
      });

      startFrameLabel.setText("Start Frame");

      startFrameSpinner.setModel(new SpinnerNumberModel(1, 1, 1000000000, 1));

      repeatEveryFrameSpinner.setModel(new SpinnerNumberModel(1, 1, 1000000000, 1));

      framesLabel.setText("frames");

      useInMDAcheckBox.setText("Run ROIs in Multi-Dimensional Acquisition");
      useInMDAcheckBox.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            useInMDAcheckBoxActionPerformed(evt);
         }
      });

      roiStatusLabel.setText("No ROIs submitted yet");

      org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
         jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPanel3Layout.createSequentialGroup()
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(jPanel3Layout.createSequentialGroup()
                  .add(25, 25, 25)
                  .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(roiStatusLabel)
                     .add(setRoiButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                     .add(jPanel3Layout.createSequentialGroup()
                        .add(roiLoopLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(roiLoopSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(roiLoopTimesLabel))))
               .add(jPanel3Layout.createSequentialGroup()
                  .add(49, 49, 49)
                  .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(jPanel3Layout.createSequentialGroup()
                        .add(startFrameLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(startFrameSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                     .add(jPanel3Layout.createSequentialGroup()
                        .add(repeatCheckBox)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(repeatEveryFrameSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(framesLabel)))))
            .addContainerGap())
         .add(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(jPanel3Layout.createSequentialGroup()
                  .add(10, 10, 10)
                  .add(useInMDAcheckBox)
                  .addContainerGap(25, Short.MAX_VALUE))
               .add(jPanel3Layout.createSequentialGroup()
                  .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                     .add(jSeparator1)
                     .add(jSeparator2))
                  .addContainerGap())))
         .add(jPanel3Layout.createSequentialGroup()
            .add(22, 22, 22)
            .add(runROIsNowButton)
            .add(0, 0, Short.MAX_VALUE))
      );
      jPanel3Layout.setVerticalGroup(
         jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPanel3Layout.createSequentialGroup()
            .add(21, 21, 21)
            .add(setRoiButton)
            .add(18, 18, 18)
            .add(roiStatusLabel)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 14, Short.MAX_VALUE)
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(roiLoopLabel)
               .add(roiLoopTimesLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(roiLoopSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(7, 7, 7)
            .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(16, 16, 16)
            .add(runROIsNowButton)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(useInMDAcheckBox)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(startFrameLabel)
               .add(startFrameSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(repeatCheckBox)
               .add(repeatEveryFrameSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(framesLabel))
            .add(32, 32, 32))
      );

      jTabbedPane1.addTab("ROIs", jPanel3);

      allPixelsButton.setText("All Pixels");
      allPixelsButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            allPixelsButtonActionPerformed(evt);
         }
      });

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(layout.createSequentialGroup()
                  .add(onButton)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(offButton)
                  .add(18, 18, 18)
                  .add(allPixelsButton)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(calibrateButton)))
            .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
               .add(onButton)
               .add(offButton)
               .add(allPixelsButton)
               .add(calibrateButton))
            .add(18, 18, 18)
            .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(23, Short.MAX_VALUE))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

    private void calibrateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calibrateButtonActionPerformed
       controller_.calibrate();
    }//GEN-LAST:event_calibrateButtonActionPerformed

    private void onButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onButtonActionPerformed
       controller_.turnOn();
       offButton.setSelected(false);
       onButton.setSelected(true);
       pointAndShootOffButtonActionPerformed(null);
    }//GEN-LAST:event_onButtonActionPerformed

    private void offButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_offButtonActionPerformed
       controller_.turnOff();
       offButton.setSelected(true);
       onButton.setSelected(false);
    }//GEN-LAST:event_offButtonActionPerformed

    private void allPixelsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allPixelsButtonActionPerformed
       controller_.activateAllPixels();
    }//GEN-LAST:event_allPixelsButtonActionPerformed

    private void repeatCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repeatCheckBoxActionPerformed
       controller_.setRoiRepetitions(repeatCheckBox.isSelected()
               ? getRoiRepetitionsSetting() : 0);
       updateWidgetsEnabledStatus();
}//GEN-LAST:event_repeatCheckBoxActionPerformed

    private void roiLoopSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_roiLoopSpinnerStateChanged
       controller_.setRoiRepetitions(getRoiRepetitionsSetting());
}//GEN-LAST:event_roiLoopSpinnerStateChanged

    private void runROIsNowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runROIsNowButtonActionPerformed
       controller_.runPolygons();
}//GEN-LAST:event_runROIsNowButtonActionPerformed

    private void setRoiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setRoiButtonActionPerformed
       numROIs_ = controller_.setRois(getRoiRepetitionsSetting());
       this.updateWidgetsEnabledStatus();
}//GEN-LAST:event_setRoiButtonActionPerformed

    private void pointAndShootIntervalSpinnerVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_pointAndShootIntervalSpinnerVetoableChange
       updatePointAndShoot();
}//GEN-LAST:event_pointAndShootIntervalSpinnerVetoableChange

   private void centerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_centerButtonActionPerformed
      offButtonActionPerformed(null);
      controller_.moveToCenter();
   }//GEN-LAST:event_centerButtonActionPerformed

    private void pointAndShootIntervalSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pointAndShootIntervalSpinnerStateChanged
       updatePointAndShoot();
    }//GEN-LAST:event_pointAndShootIntervalSpinnerStateChanged

    private void pointAndShootOnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointAndShootOnButtonActionPerformed
       pointAndShootOnButton.setSelected(true);
       pointAndShootOffButton.setSelected(false);
       offButtonActionPerformed(null);
       updatePointAndShoot();
    }//GEN-LAST:event_pointAndShootOnButtonActionPerformed

    private void pointAndShootOffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointAndShootOffButtonActionPerformed
       pointAndShootOnButton.setSelected(false);
       pointAndShootOffButton.setSelected(true);
       updatePointAndShoot();
    }//GEN-LAST:event_pointAndShootOffButtonActionPerformed

    private void useInMDAcheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useInMDAcheckBoxActionPerformed
       updateWidgetsEnabledStatus();
       if (useInMDAcheckBox.isSelected()) {
          controller_.attachToMDA(getSpinnerValue(this.startFrameSpinner) - 1,
                  this.repeatCheckBox.isSelected(),
                  getSpinnerValue(this.repeatEveryFrameSpinner));
       } else {
          controller_.removeFromMDA();
       }
    }//GEN-LAST:event_useInMDAcheckBoxActionPerformed

   private int getRoiRepetitionsSetting() {
      return getSpinnerValue(roiLoopSpinner);
   }

   private int getSpinnerValue(JSpinner spinner) {
      return Integer.parseInt(spinner.getValue().toString());
   }

   public void updatePointAndShoot() {
      controller_.setPointAndShootInterval(1000 * Double.parseDouble(this.pointAndShootIntervalSpinner.getValue().toString()));
      controller_.activatePointAndShootMode(pointAndShootOnButton.isSelected());
   }

   public void dispose() {
      super.dispose();
   }

   private void formWindowClosing(java.awt.event.WindowEvent evt) {
      plugin_.dispose();
   }
 
   public void updateWidgetsEnabledStatus() {
      boolean roisSubmitted = false;
      if (numROIs_ == 0) {
         roiStatusLabel.setText("No ROIs submitted");
         roisSubmitted = false;
      } else if (numROIs_ == 1) {
         roiStatusLabel.setText("One ROI submitted");
         roisSubmitted = true;
      } else { // numROIs_ > 1
         roiStatusLabel.setText("" + numROIs_ + " ROIs submitted");
         roisSubmitted = true;
      }

      roiLoopLabel.setEnabled(roisSubmitted);
      roiLoopSpinner.setEnabled(roisSubmitted);
      roiLoopTimesLabel.setEnabled(roisSubmitted);
      runROIsNowButton.setEnabled(roisSubmitted);
      useInMDAcheckBox.setEnabled(roisSubmitted);

      boolean useInMDA = roisSubmitted && useInMDAcheckBox.isSelected();
      startFrameLabel.setEnabled(useInMDA);
      startFrameSpinner.setEnabled(useInMDA);
      repeatCheckBox.setEnabled(useInMDA);

      boolean repeatInMDA = useInMDA && repeatCheckBox.isSelected();
      repeatEveryFrameSpinner.setEnabled(repeatInMDA);
      framesLabel.setEnabled(repeatInMDA);
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton allPixelsButton;
   private javax.swing.JButton calibrateButton;
   private javax.swing.JButton centerButton;
   private javax.swing.JLabel closeShutterLabel;
   private javax.swing.JLabel framesLabel;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JSeparator jSeparator2;
   private javax.swing.JTabbedPane jTabbedPane1;
   private javax.swing.JButton offButton;
   private javax.swing.JButton onButton;
   private javax.swing.JSpinner pointAndShootIntervalSpinner;
   private javax.swing.JToggleButton pointAndShootOffButton;
   private javax.swing.JToggleButton pointAndShootOnButton;
   private javax.swing.JCheckBox repeatCheckBox;
   private javax.swing.JSpinner repeatEveryFrameSpinner;
   private javax.swing.JLabel roiLoopLabel;
   private javax.swing.JSpinner roiLoopSpinner;
   private javax.swing.JLabel roiLoopTimesLabel;
   private javax.swing.JLabel roiStatusLabel;
   private javax.swing.JButton runROIsNowButton;
   private javax.swing.JButton setRoiButton;
   private javax.swing.JLabel startFrameLabel;
   private javax.swing.JSpinner startFrameSpinner;
   private javax.swing.JCheckBox useInMDAcheckBox;
   // End of variables declaration//GEN-END:variables

   public void turnedOn() {
      SwingUtilities.invokeLater(new Runnable() {
         public void run() {
            onButton.setSelected(true);
            offButton.setSelected(false);
         }
      });
   }

   public void turnedOff() {
      SwingUtilities.invokeLater(new Runnable() {
         public void run() {
            onButton.setSelected(false);
            offButton.setSelected(true);
         }
      });
   }
}
