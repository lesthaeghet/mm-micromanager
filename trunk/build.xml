<!-- Build all components of Micro-Manager -->
<!-- Run 'ant -p' for usage -->
<project name="mm" basedir="." default="build">
	<include file="buildscripts/buildprops.xml"/>

	<presetdef name="buildcpp">
		<exec executable="cmd">
			<arg value="/c"/>
			<arg value="buildscripts\buildCpp.bat"/>
			<arg value="${mm.architecture}"/>
		</exec>
	</presetdef>

	<target name="build-cpp" description="Build all C++ components">
		<buildcpp/>
	</target>

	<target name="build-mmcorej" description="Build MMCoreJ Java package">
		<!-- Until we update the C++ build and separte out the Java
		     compilation, just use the results generated by
		     MMCoreJ_wrap.vcproj -->
		<mkdir dir="${mm.java.outdir}"/>
		<copy todir="${mm.java.outdir}" file="${mm.cpp.outdir}/MMCoreJ.jar"/>
	</target>

	<macrodef name="run-all-java-projects">
		<attribute name="target"/>
		<sequential>
			<subant target="@{target}">
				<filelist dir=".">
					<!-- Note: Order matters -->
					<file name="mmstudio/build.xml"/>
					<file name="acqEngine/build.xml"/>
					<file name="plugins/build.xml"/>
					<file name="autofocus/build.xml"/>
				</filelist>
			</subant>
		</sequential>
	</macrodef>

	<target name="build" depends="build-cpp,build-mmcorej" description="Build all components">
		<run-all-java-projects target="jar"/>
	</target>

	<target name="stage" depends="build" description="Assemble files to install">
		<run-all-java-projects target="install"/>

		<!-- Until we update the C++ build, just copy all output files
		     here -->
		<copy todir="${mm.installdir}">
			<fileset dir="${mm.cpp.outdir}" includes="*"/>
		</copy>

		<!-- XXX Remaining files to copy; should put elsewhere -->
		<copy todir="${mm.installdir}" file="${mm.basedir}/../3rdpartypublic/JavaLauncher/ImageJ.exe"/>
		<copy todir="${mm.installdir}" file="${mm.java.lib.imagej}"/>
		<copy todir="${mm.java.installdir}">
			<!-- XXX Should limit to the Jars that are actually
			     used. Use Ivy? -->
			<fileset dir="${mm.java.libs}" includes="*.jar" excludes="ij.jar"/>
		</copy>
		<mkdir dir="${mm.scripts.installdir}"/>
		<copy todir="${mm.scripts.installdir}">
			<filelist dir="${mm.scripts.srcdir}">
				<!-- XXX By what criteria are we including scripts? -->
				<!-- XXX We are out of sync with the Unix build -->
				<file name="AutoExpose.bsh"/>
				<file name="Init.bsh"/>
				<file name="camera_test.bsh"/>
				<file name="config_test.bsh"/>
				<file name="image_snap_example.bsh"/>
				<file name="image_snap_example_2.bsh"/>
				<file name="live_demo.bsh"/>
				<file name="manualAcq.bsh"/>
				<file name="mm_beanshell_startup.bsh"/>
				<file name="mm_inspector.bsh"/>
				<file name="mm_load_docs.bsh"/>
				<file name="mm_test_all.bsh"/>
				<file name="mm_test_camera.bsh"/>
				<file name="mm_test_properties.bsh"/>
				<file name="mm_test_shutter.bsh"/>
				<file name="mm_test_xystage.bsh"/>
				<file name="mm_test_zstage.bsh"/>
				<file name="sdemo1.bsh"/>
				<file name="sdemo2.bsh"/>
				<file name="setZoom.bsh"/>
				<file name="slm_demo.bsh"/>
			</filelist>
		</copy>
	</target>

	<target name="package" depends="stage">
		<exec dir="${mm.installdir}" executable="${mm.basedir}/../3rdparty/Inno_Setup_5/iscc.exe">
			<!-- TODO 32 vs 64 -->
			<arg line="/FMMSetup_ ${mm.basedir}/Install_${mm.architecture}/MM-ImageJ-Install64.iss"/>
		</exec>
	</target>

	<target name="clean">
		<!-- <delete dir="${mm.cpp.outdir}"/> -->
		<delete dir="${mm.cpp.intdir}"/>
		<run-all-java-projects target="clean"/>
	</target>

	<target name="clean-all">
		<delete dir="${mm.outdir}"/>
		<delete dir="${mm.intdir}"/>
	</target>

	<target name="unstage">
		<delete dir="${mm.installdir}"/>
	</target>

	<target name="unstage-all">
		<delete dir="${mm.stagedir}"/>
	</target>
</project>
