# This file is part of a progressive rewrite of the GNU (autotools) build
# scripts. Please do not modify this file. Instead, please modify the legacy
# build files (without the .nextgen suffix). Changes to legacy files will be
# automatically detected and manually applied to the next-gen files.
# - Mark Tsuchida
#
# %nextgen_build_filename = Makefile.am
# %nextgen_build_replaces = Makefile.am 88722ef6b287a154263941844a63fa31

AUTOMAKE_OPTIONS = foreign subdir-objects

# We use -fno-strict-aliasing (which disables certain optimizations in GCC and
# Clang), because SWIG documentation calls for it (when wrapping for Java).
# Strictly speaking, this should only be necessary when compiling
# SWIG-generated code; if our own code changes behavior depending on whether
# this flag is used or not, it should be considered a bug in our code.
#
# (We used to globally use -O by default, rather than -O2, on Linux, presumably
# for the above reason (though the intent was never documented). But there is
# nothing Linux-specific about this.)
AM_CXXFLAGS = $(BOOST_CPPFLAGS) -fno-strict-aliasing
AM_CPPFLAGS = $(JAVAINC)

# This ugly list of headers is necessary to trigger the rebuild of the
# SWIG-generated source when a header is modified. The issue cannot be fixed
# here; it is a result of poor implementation hiding in the MMCore headers.
MMCoreJ_wrap_SWIG_sources = MMCoreJ.i \
	../MMCore/CircularBuffer.h  \
	../MMCore/ConfigGroup.h  \
	../MMCore/Configuration.h \
	../MMCore/CoreCallback.h \
	../MMCore/CoreProperty.h \
	../MMCore/CoreUtils.h \
	../MMCore/Error.h \
	../MMCore/ErrorCodes.h \
	../MMCore/Host.h  \
	../MMCore/MMCore.h  \
	../MMCore/MMEventCallback.h \
	../MMCore/PluginManager.h \
	../MMDevice/ImageMetadata.h \
	../MMDevice/MMDevice.h \
	../MMDevice/MMDeviceConstants.h

# DEVICEADAPTERPATH is poorly named: it actually means "where to put all MM
# libraries, including device adapters".
MMCoreJ_wrap.cxx: $(MMCoreJ_wrap_SWIG_sources)
	test -d mmcorej || mkdir mmcorej
	touch $(srcdir)/MMCoreJ_wrap.cxx || (chmod +wrx $(srcdir) && touch $(srcdir)/MMCoreJ_wrap.cxx)
	$(SWIG) -c++ -java -package mmcorej -outdir mmcorej -module MMCoreJ \
		"-DMMCOREJ_LIBRARY_PATH=\"$(DEVICEADAPTERPATH)\"" \
		-o $(srcdir)/MMCoreJ_wrap.cxx $(srcdir)/MMCoreJ.i 
	cp $(srcdir)/MMCoreJ_wrap.cxx MMCoreJ_wrap.cxx || echo "No problem"
	
lib_LTLIBRARIES = libMMCoreJ_wrap.la
nodist_libMMCoreJ_wrap_la_SOURCES = MMCoreJ_wrap.cxx
libMMCoreJ_wrap_la_LIBADD = ../MMCore/libMMCore.la $(BOOST_SYSTEM_LIB) -ldl
# TODO Add -shrext .jnilib on OS X and normalize install target
libMMCoreJ_wrap_la_LDFLAGS = -module -avoid-version $(BOOST_LDFLAGS)

$(srcdir)/MMCoreJ.jar:  MMCoreJ_wrap.cxx \
	libMMCoreJ_wrap.la \
	TaggedImage.java
	mkdir -p mmcorej
	cp TaggedImage.java mmcorej/
	$(JAVAC) -source 1.5 -target 1.5 ../mmstudio/src/org/json/*.java mmcorej/*.java
	$(JAR) cvf MMCoreJ.jar mmcorej/*.class

all:
	make $(srcdir)/MMCoreJ_wrap.cxx
	make $(srcdir)/MMCoreJ.jar
	cp MMCoreJ.jar ../bin

macinstall:
	cp .libs/libMMCoreJ_wrap.so $(top_srcdir)/MacInstaller/Package_contents/libMMCoreJ_wrap$(JAVASO)

install:
	install -d $(DESTDIR)$(DEVICEADAPTERPATH)
	install .libs/libMMCoreJ_wrap.so $(DESTDIR)$(DEVICEADAPTERPATH)/libMMCoreJ_wrap$(JAVASO) 
	install -d $(DESTDIR)$(JARPATH)
	install MMCoreJ.jar $(DESTDIR)$(JARPATH)/MMCoreJ.jar 

###IJ-dependent! #todo: split IJ and pure-java code

EXTRA_DIST = license.txt

clean:
	test -z "libMMCoreJ_wrap.la" || rm -f libMMCoreJ_wrap.la
	rm -rf mmcorej/
	rm -f MMCoreJ_wrap.cxx
	rm -f "./so_locations"
	rm -rf .libs _libs
	rm -f *.o
	rm -f *.lo

dist-hook:
	test -d $(distdir)/mmcorej || mkdir $(distdir)/mmcorej
	touch $(distdir)/mmcorej/empty.txt
