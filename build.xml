<!-- Build all components of Micro-Manager -->
<!-- Run 'ant -p' for usage -->
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="mm" basedir="." default="build">
	<include file="buildscripts/buildprops.xml"/>
	<import file="buildscripts/version.xml"/>

	<fail message="Micro-Manager Ant build files are currently designed for Windows only">
		<condition><not><os family="winnt"/></not></condition>
	</fail>

	<macrodef name="run-all-java-projects">
		<attribute name="target"/>
		<sequential>
			<subant target="@{target}">
				<filelist dir="${mm.basedir}">
					<!-- Note: Order matters -->
					<file name="MMCoreJ_wrap/build.xml"/>
					<file name="mmstudio/build.xml"/>
					<file name="acqEngine/build.xml"/>
					<file name="plugins/build.xml"/>
					<file name="autofocus/build.xml"/>
				</filelist>
			</subant>
		</sequential>
	</macrodef>

	<target name="download-ivy" unless="offline">
		<property name="ivy.install.version" value="2.3.0"/>
		<mkdir dir="dependencies/ivy"/>
		<get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
			dest="dependencies/ivy"
			usetimestamp="true"/>
		<checksum file="dependencies/ivy/ivy-${ivy.install.version}.jar"
			algorithm="sha1" property="ivy.install.checksum"/>
		<fail message="checksum verification failed for ivy-${ivy.install.version}.jar">
			<condition>
				<not>
					<!-- SHA1 checksum for ivy-2.3.0.jar -->
					<equals arg1="${ivy.install.checksum}"
						arg2="c5ebf1c253ad4959a29f4acfe696ee48cdd9f473"
						forcestring="yes" casesensitive="no"/>
				</not>
			</condition>
		</fail>
	</target>

	<target name="init-ivy" depends="download-ivy">
		<path id="ivy.lib.path">
			<fileset dir="dependencies/ivy" includes="*.jar"/>
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml"
			uri="antlib:org.apache.ivy.ant"
			classpathref="ivy.lib.path"/>
	</target>

	<target name="resolve" depends="init-ivy">
		<ivy:retrieve />
	</target>

	<target name="build-buildtools">
		<ant antfile="buildscripts/AntExtensions/build.xml" useNativeBasedir="true" target="jar"/>
	</target>

	<target name="build-cpp" description="Build all C++ components">
		<mm-msbuild project="micromanager.sln" target="Build" failonerror="${mm.build.failonerror}"
			logbasename="msbuild-micromanager${mm.build.logsuffix}"/>
	</target>

	<target name="build-java" depends="build-buildtools"
		description="Build all Java components (will NOT trigger build-cpp; requires MMCoreJ_wrap DLL)">
		<run-all-java-projects target="jar"/>
	</target>

	<target name="build" depends="set-version,build-cpp,build-java" description="Build all components"/>

	<target name="stage-deviceadapters">
		<copy todir="${mm.dll.installdir}">
			<fileset dir="${mm.cpp.outdir}" includes="mmgr_dal_*.dll"/>
		</copy>
		<ant antfile="DeviceAdapters/build.xml" useNativeBasedir="true" target="install"/>
	</target>

	<target name="stage-only" description="Gather files to be installed (will NOT trigger build)">
		<antcall target="stage-deviceadapters"/>

		<run-all-java-projects target="install-only"/>

		<!-- MMCoreJ DLL -->
		<!-- XXX Should be staged by MMCoreJ_wrap/build.xml -->
		<copy todir="${mm.dll.installdir}">
			<filelist dir="${mm.cpp.outdir}" files="MMCoreJ_wrap.dll"/>
		</copy>

		<!-- MMCorePy files -->
		<!-- For staging purposes, MMCorePy is optional -->
		<copy todir="${mm.installdir}" failonerror="${mm.build.failonerror}">
			<filelist dir="${mm.cpp.outdir}" files="_MMCorePy.pyd"/>
			<filelist dir="${mm.swig.pysrcdir}" files="MMCorePy.py"/>
		</copy>

		<!-- Files to distribute as is -->
		<copy todir="${mm.installdir}">
			<fileset dir="${mm.bindistdir}" includes="**"/>
			<fileset dir="${mm.platform.bindistdir}" includes="**"/>
			<fileset dir="${mm.common.bindistdir}" includes="**"/>
		</copy>

		<!-- XXX Remaining files to copy; should put elsewhere -->
		<copy todir="${mm.installdir}" file="${mm.thirdpartypublic}/JavaLauncher/ImageJ.exe"/>
		<copy todir="${mm.installdir}" file="${mm.java.lib.imagej}"/>
		<copy todir="${mm.java.installdir}">
			<!-- XXX Should limit to the Jars that are actually
			     used. Use Ivy? -->
			<fileset dir="${mm.java.libs}" includes="*.jar" excludes="ij.jar"/>
		</copy>

		<mkdir dir="${mm.scripts.installdir}"/>
		<copy todir="${mm.scripts.installdir}">
			<fileset dir="${mm.scripts.srcdir}" includes="*.bsh"/>
		</copy>

		<!-- Java runtime -->
		<copy todir="${mm.installdir}/jre">
			<fileset dir="${mm.java.runtime}"/>
		</copy>
	</target>

	<target name="stage" depends="build-buildtools,set-version,build-cpp,build-java,stage-only"
		description="Gather files to be installed (will trigger build)"/>

	<target name="run" description="Run the staged application (will NOT trigger build or stage)">
		<exec dir="${mm.installdir}" executable="${mm.installdir}/ImageJ.exe"/>
	</target>

	<target name="run-nolauncher" description="Run the staged application without using the ImageJ launcher">
		<java classname="ij.ImageJ"
			classpath="${mm.installdir}/ij.jar"
			fork="yes" maxmemory="1000M"
			dir="${mm.installdir}"/>
	</target>

	<target name="package" description="Create installer from staged files (will NOT trigger build or stage)">
		<!-- Default name, if not set -->
		<property name="mm.installer.basename" value="MMSetup_${mm.architecture.bits}bit"/>
		<property name="mm.installer" value="${mm.installer.basename}.exe"/>

		<mkdir dir="${mm.distdir}"/>
		<delete file="${mm.distdir}/${mm.installer}"/>
		<exec dir="${mm.basedir}" executable="${mm.basedir}/../3rdparty/Inno_Setup_5/iscc.exe"
			failonerror="true">
			<arg value="/O${mm.distdir}"/>
			<arg value="/F${mm.installer.basename}"/>
			<arg file="${mm.basedir}/buildscripts/installer-${mm.architecture}.iss"/>
		</exec>
	</target>

	<target name="package-symbols" description="Create a ZIP archive of the PDB files (will NOT trigger build)">
		<!-- Default name, if not set -->
		<property name="mm.symbols.basename"
			value="MMDebugSymbols_${mm.architecture}"/>
		<property name="mm.symbols" value="${mm.symbols.basename}.zip"/>

		<mkdir dir="${mm.symbolsdir}"/>
		<zip destfile="${mm.symbolsdir}/${mm.symbols}"
			basedir="${mm.cpp.outdir}"
			includes="*.pdb"/>
	</target>

	<target name="clean-java" description="Clean only the Java components">
		<run-all-java-projects target="clean"/>
	</target>

	<target name="clean" depends="clean-java" description="Delete build intermediate and output files">
		<delete dir="${mm.cpp.outdir}"/>
		<delete dir="${mm.cpp.intdir}"/>
	</target>

	<target name="clean-all" description="Delete build files for all configurations and architectures">
		<delete dir="${mm.outdir}"/>
		<delete dir="${mm.intdir}"/>
	</target>

	<target name="unstage" description="Delete staged files">
		<delete dir="${mm.installdir}"/>
	</target>

	<target name="unstage-all" description="Delete staged files for all configurations and architectures">
		<delete dir="${mm.stagedir}"/>
	</target>
</project>
