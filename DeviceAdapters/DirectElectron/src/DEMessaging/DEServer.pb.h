// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DEServer.proto

#ifndef PROTOBUF_DEServer_2eproto__INCLUDED
#define PROTOBUF_DEServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace DEMessaging {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DEServer_2eproto();
void protobuf_AssignDesc_DEServer_2eproto();
void protobuf_ShutdownFile_DEServer_2eproto();

class DEPacket;
class SingleCommand;
class AnyParameter;
class Acknowledge;
class SingleAcknowledge;
class DataHeader;

enum DEPacket_Type {
  DEPacket_Type_P_COMMAND = 1,
  DEPacket_Type_P_ACKNOWLEDGE = 2,
  DEPacket_Type_P_DATA_HEADER = 3
};
bool DEPacket_Type_IsValid(int value);
const DEPacket_Type DEPacket_Type_Type_MIN = DEPacket_Type_P_COMMAND;
const DEPacket_Type DEPacket_Type_Type_MAX = DEPacket_Type_P_DATA_HEADER;
const int DEPacket_Type_Type_ARRAYSIZE = DEPacket_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* DEPacket_Type_descriptor();
inline const ::std::string& DEPacket_Type_Name(DEPacket_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    DEPacket_Type_descriptor(), value);
}
inline bool DEPacket_Type_Parse(
    const ::std::string& name, DEPacket_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DEPacket_Type>(
    DEPacket_Type_descriptor(), name, value);
}
enum AnyParameter_Type {
  AnyParameter_Type_P_INT = 1,
  AnyParameter_Type_P_BOOL = 2,
  AnyParameter_Type_P_STRING = 3,
  AnyParameter_Type_P_FLOAT = 4,
  AnyParameter_Type_P_BYTES = 5
};
bool AnyParameter_Type_IsValid(int value);
const AnyParameter_Type AnyParameter_Type_Type_MIN = AnyParameter_Type_P_INT;
const AnyParameter_Type AnyParameter_Type_Type_MAX = AnyParameter_Type_P_BYTES;
const int AnyParameter_Type_Type_ARRAYSIZE = AnyParameter_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* AnyParameter_Type_descriptor();
inline const ::std::string& AnyParameter_Type_Name(AnyParameter_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    AnyParameter_Type_descriptor(), value);
}
inline bool AnyParameter_Type_Parse(
    const ::std::string& name, AnyParameter_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AnyParameter_Type>(
    AnyParameter_Type_descriptor(), name, value);
}
// ===================================================================

class DEPacket : public ::google::protobuf::Message {
 public:
  DEPacket();
  virtual ~DEPacket();
  
  DEPacket(const DEPacket& from);
  
  inline DEPacket& operator=(const DEPacket& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DEPacket& default_instance();
  
  void Swap(DEPacket* other);
  
  // implements Message ----------------------------------------------
  
  DEPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DEPacket& from);
  void MergeFrom(const DEPacket& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DEPacket_Type Type;
  static const Type P_COMMAND = DEPacket_Type_P_COMMAND;
  static const Type P_ACKNOWLEDGE = DEPacket_Type_P_ACKNOWLEDGE;
  static const Type P_DATA_HEADER = DEPacket_Type_P_DATA_HEADER;
  static inline bool Type_IsValid(int value) {
    return DEPacket_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DEPacket_Type_Type_MIN;
  static const Type Type_MAX =
    DEPacket_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DEPacket_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return DEPacket_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return DEPacket_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return DEPacket_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .DEMessaging.DEPacket.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::DEMessaging::DEPacket_Type type() const;
  inline void set_type(::DEMessaging::DEPacket_Type value);
  
  // optional uint32 camera_identifier = 2;
  inline bool has_camera_identifier() const;
  inline void clear_camera_identifier();
  static const int kCameraIdentifierFieldNumber = 2;
  inline ::google::protobuf::uint32 camera_identifier() const;
  inline void set_camera_identifier(::google::protobuf::uint32 value);
  
  // repeated .DEMessaging.SingleCommand command = 3;
  inline int command_size() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 3;
  inline const ::DEMessaging::SingleCommand& command(int index) const;
  inline ::DEMessaging::SingleCommand* mutable_command(int index);
  inline ::DEMessaging::SingleCommand* add_command();
  inline const ::google::protobuf::RepeatedPtrField< ::DEMessaging::SingleCommand >&
      command() const;
  inline ::google::protobuf::RepeatedPtrField< ::DEMessaging::SingleCommand >*
      mutable_command();
  
  // repeated .DEMessaging.SingleAcknowledge acknowledge = 4;
  inline int acknowledge_size() const;
  inline void clear_acknowledge();
  static const int kAcknowledgeFieldNumber = 4;
  inline const ::DEMessaging::SingleAcknowledge& acknowledge(int index) const;
  inline ::DEMessaging::SingleAcknowledge* mutable_acknowledge(int index);
  inline ::DEMessaging::SingleAcknowledge* add_acknowledge();
  inline const ::google::protobuf::RepeatedPtrField< ::DEMessaging::SingleAcknowledge >&
      acknowledge() const;
  inline ::google::protobuf::RepeatedPtrField< ::DEMessaging::SingleAcknowledge >*
      mutable_acknowledge();
  
  // optional .DEMessaging.DataHeader data_header = 5;
  inline bool has_data_header() const;
  inline void clear_data_header();
  static const int kDataHeaderFieldNumber = 5;
  inline const ::DEMessaging::DataHeader& data_header() const;
  inline ::DEMessaging::DataHeader* mutable_data_header();
  inline ::DEMessaging::DataHeader* release_data_header();
  
  // optional string camera_name = 6;
  inline bool has_camera_name() const;
  inline void clear_camera_name();
  static const int kCameraNameFieldNumber = 6;
  inline const ::std::string& camera_name() const;
  inline void set_camera_name(const ::std::string& value);
  inline void set_camera_name(const char* value);
  inline void set_camera_name(const char* value, size_t size);
  inline ::std::string* mutable_camera_name();
  inline ::std::string* release_camera_name();
  
  // @@protoc_insertion_point(class_scope:DEMessaging.DEPacket)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_camera_identifier();
  inline void clear_has_camera_identifier();
  inline void set_has_data_header();
  inline void clear_has_data_header();
  inline void set_has_camera_name();
  inline void clear_has_camera_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::uint32 camera_identifier_;
  ::google::protobuf::RepeatedPtrField< ::DEMessaging::SingleCommand > command_;
  ::google::protobuf::RepeatedPtrField< ::DEMessaging::SingleAcknowledge > acknowledge_;
  ::DEMessaging::DataHeader* data_header_;
  ::std::string* camera_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_DEServer_2eproto();
  friend void protobuf_AssignDesc_DEServer_2eproto();
  friend void protobuf_ShutdownFile_DEServer_2eproto();
  
  void InitAsDefaultInstance();
  static DEPacket* default_instance_;
};
// -------------------------------------------------------------------

class SingleCommand : public ::google::protobuf::Message {
 public:
  SingleCommand();
  virtual ~SingleCommand();
  
  SingleCommand(const SingleCommand& from);
  
  inline SingleCommand& operator=(const SingleCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleCommand& default_instance();
  
  void Swap(SingleCommand* other);
  
  // implements Message ----------------------------------------------
  
  SingleCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleCommand& from);
  void MergeFrom(const SingleCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 command_id = 1;
  inline bool has_command_id() const;
  inline void clear_command_id();
  static const int kCommandIdFieldNumber = 1;
  inline ::google::protobuf::uint32 command_id() const;
  inline void set_command_id(::google::protobuf::uint32 value);
  
  // optional string command_name = 2;
  inline bool has_command_name() const;
  inline void clear_command_name();
  static const int kCommandNameFieldNumber = 2;
  inline const ::std::string& command_name() const;
  inline void set_command_name(const ::std::string& value);
  inline void set_command_name(const char* value);
  inline void set_command_name(const char* value, size_t size);
  inline ::std::string* mutable_command_name();
  inline ::std::string* release_command_name();
  
  // repeated .DEMessaging.AnyParameter parameter = 3;
  inline int parameter_size() const;
  inline void clear_parameter();
  static const int kParameterFieldNumber = 3;
  inline const ::DEMessaging::AnyParameter& parameter(int index) const;
  inline ::DEMessaging::AnyParameter* mutable_parameter(int index);
  inline ::DEMessaging::AnyParameter* add_parameter();
  inline const ::google::protobuf::RepeatedPtrField< ::DEMessaging::AnyParameter >&
      parameter() const;
  inline ::google::protobuf::RepeatedPtrField< ::DEMessaging::AnyParameter >*
      mutable_parameter();
  
  // @@protoc_insertion_point(class_scope:DEMessaging.SingleCommand)
 private:
  inline void set_has_command_id();
  inline void clear_has_command_id();
  inline void set_has_command_name();
  inline void clear_has_command_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* command_name_;
  ::google::protobuf::RepeatedPtrField< ::DEMessaging::AnyParameter > parameter_;
  ::google::protobuf::uint32 command_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_DEServer_2eproto();
  friend void protobuf_AssignDesc_DEServer_2eproto();
  friend void protobuf_ShutdownFile_DEServer_2eproto();
  
  void InitAsDefaultInstance();
  static SingleCommand* default_instance_;
};
// -------------------------------------------------------------------

class AnyParameter : public ::google::protobuf::Message {
 public:
  AnyParameter();
  virtual ~AnyParameter();
  
  AnyParameter(const AnyParameter& from);
  
  inline AnyParameter& operator=(const AnyParameter& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyParameter& default_instance();
  
  void Swap(AnyParameter* other);
  
  // implements Message ----------------------------------------------
  
  AnyParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnyParameter& from);
  void MergeFrom(const AnyParameter& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef AnyParameter_Type Type;
  static const Type P_INT = AnyParameter_Type_P_INT;
  static const Type P_BOOL = AnyParameter_Type_P_BOOL;
  static const Type P_STRING = AnyParameter_Type_P_STRING;
  static const Type P_FLOAT = AnyParameter_Type_P_FLOAT;
  static const Type P_BYTES = AnyParameter_Type_P_BYTES;
  static inline bool Type_IsValid(int value) {
    return AnyParameter_Type_IsValid(value);
  }
  static const Type Type_MIN =
    AnyParameter_Type_Type_MIN;
  static const Type Type_MAX =
    AnyParameter_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    AnyParameter_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return AnyParameter_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return AnyParameter_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return AnyParameter_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .DEMessaging.AnyParameter.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::DEMessaging::AnyParameter_Type type() const;
  inline void set_type(::DEMessaging::AnyParameter_Type value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional sint32 p_int = 3;
  inline bool has_p_int() const;
  inline void clear_p_int();
  static const int kPIntFieldNumber = 3;
  inline ::google::protobuf::int32 p_int() const;
  inline void set_p_int(::google::protobuf::int32 value);
  
  // optional bool p_bool = 4;
  inline bool has_p_bool() const;
  inline void clear_p_bool();
  static const int kPBoolFieldNumber = 4;
  inline bool p_bool() const;
  inline void set_p_bool(bool value);
  
  // optional string p_string = 5;
  inline bool has_p_string() const;
  inline void clear_p_string();
  static const int kPStringFieldNumber = 5;
  inline const ::std::string& p_string() const;
  inline void set_p_string(const ::std::string& value);
  inline void set_p_string(const char* value);
  inline void set_p_string(const char* value, size_t size);
  inline ::std::string* mutable_p_string();
  inline ::std::string* release_p_string();
  
  // optional float p_float = 6;
  inline bool has_p_float() const;
  inline void clear_p_float();
  static const int kPFloatFieldNumber = 6;
  inline float p_float() const;
  inline void set_p_float(float value);
  
  // optional bytes p_bytes = 7;
  inline bool has_p_bytes() const;
  inline void clear_p_bytes();
  static const int kPBytesFieldNumber = 7;
  inline const ::std::string& p_bytes() const;
  inline void set_p_bytes(const ::std::string& value);
  inline void set_p_bytes(const char* value);
  inline void set_p_bytes(const void* value, size_t size);
  inline ::std::string* mutable_p_bytes();
  inline ::std::string* release_p_bytes();
  
  // @@protoc_insertion_point(class_scope:DEMessaging.AnyParameter)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_p_int();
  inline void clear_has_p_int();
  inline void set_has_p_bool();
  inline void clear_has_p_bool();
  inline void set_has_p_string();
  inline void clear_has_p_string();
  inline void set_has_p_float();
  inline void clear_has_p_float();
  inline void set_has_p_bytes();
  inline void clear_has_p_bytes();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  int type_;
  ::google::protobuf::int32 p_int_;
  ::std::string* p_string_;
  bool p_bool_;
  float p_float_;
  ::std::string* p_bytes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_DEServer_2eproto();
  friend void protobuf_AssignDesc_DEServer_2eproto();
  friend void protobuf_ShutdownFile_DEServer_2eproto();
  
  void InitAsDefaultInstance();
  static AnyParameter* default_instance_;
};
// -------------------------------------------------------------------

class Acknowledge : public ::google::protobuf::Message {
 public:
  Acknowledge();
  virtual ~Acknowledge();
  
  Acknowledge(const Acknowledge& from);
  
  inline Acknowledge& operator=(const Acknowledge& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Acknowledge& default_instance();
  
  void Swap(Acknowledge* other);
  
  // implements Message ----------------------------------------------
  
  Acknowledge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Acknowledge& from);
  void MergeFrom(const Acknowledge& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 camera_identifier = 1;
  inline bool has_camera_identifier() const;
  inline void clear_camera_identifier();
  static const int kCameraIdentifierFieldNumber = 1;
  inline ::google::protobuf::uint32 camera_identifier() const;
  inline void set_camera_identifier(::google::protobuf::uint32 value);
  
  // repeated .DEMessaging.SingleAcknowledge acknowledge = 2;
  inline int acknowledge_size() const;
  inline void clear_acknowledge();
  static const int kAcknowledgeFieldNumber = 2;
  inline const ::DEMessaging::SingleAcknowledge& acknowledge(int index) const;
  inline ::DEMessaging::SingleAcknowledge* mutable_acknowledge(int index);
  inline ::DEMessaging::SingleAcknowledge* add_acknowledge();
  inline const ::google::protobuf::RepeatedPtrField< ::DEMessaging::SingleAcknowledge >&
      acknowledge() const;
  inline ::google::protobuf::RepeatedPtrField< ::DEMessaging::SingleAcknowledge >*
      mutable_acknowledge();
  
  // @@protoc_insertion_point(class_scope:DEMessaging.Acknowledge)
 private:
  inline void set_has_camera_identifier();
  inline void clear_has_camera_identifier();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::DEMessaging::SingleAcknowledge > acknowledge_;
  ::google::protobuf::uint32 camera_identifier_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DEServer_2eproto();
  friend void protobuf_AssignDesc_DEServer_2eproto();
  friend void protobuf_ShutdownFile_DEServer_2eproto();
  
  void InitAsDefaultInstance();
  static Acknowledge* default_instance_;
};
// -------------------------------------------------------------------

class SingleAcknowledge : public ::google::protobuf::Message {
 public:
  SingleAcknowledge();
  virtual ~SingleAcknowledge();
  
  SingleAcknowledge(const SingleAcknowledge& from);
  
  inline SingleAcknowledge& operator=(const SingleAcknowledge& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleAcknowledge& default_instance();
  
  void Swap(SingleAcknowledge* other);
  
  // implements Message ----------------------------------------------
  
  SingleAcknowledge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleAcknowledge& from);
  void MergeFrom(const SingleAcknowledge& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline bool error() const;
  inline void set_error(bool value);
  
  // optional uint32 command_id = 2;
  inline bool has_command_id() const;
  inline void clear_command_id();
  static const int kCommandIdFieldNumber = 2;
  inline ::google::protobuf::uint32 command_id() const;
  inline void set_command_id(::google::protobuf::uint32 value);
  
  // optional string command_name = 3;
  inline bool has_command_name() const;
  inline void clear_command_name();
  static const int kCommandNameFieldNumber = 3;
  inline const ::std::string& command_name() const;
  inline void set_command_name(const ::std::string& value);
  inline void set_command_name(const char* value);
  inline void set_command_name(const char* value, size_t size);
  inline ::std::string* mutable_command_name();
  inline ::std::string* release_command_name();
  
  // optional string error_message = 4;
  inline bool has_error_message() const;
  inline void clear_error_message();
  static const int kErrorMessageFieldNumber = 4;
  inline const ::std::string& error_message() const;
  inline void set_error_message(const ::std::string& value);
  inline void set_error_message(const char* value);
  inline void set_error_message(const char* value, size_t size);
  inline ::std::string* mutable_error_message();
  inline ::std::string* release_error_message();
  
  // repeated .DEMessaging.AnyParameter parameter = 5;
  inline int parameter_size() const;
  inline void clear_parameter();
  static const int kParameterFieldNumber = 5;
  inline const ::DEMessaging::AnyParameter& parameter(int index) const;
  inline ::DEMessaging::AnyParameter* mutable_parameter(int index);
  inline ::DEMessaging::AnyParameter* add_parameter();
  inline const ::google::protobuf::RepeatedPtrField< ::DEMessaging::AnyParameter >&
      parameter() const;
  inline ::google::protobuf::RepeatedPtrField< ::DEMessaging::AnyParameter >*
      mutable_parameter();
  
  // @@protoc_insertion_point(class_scope:DEMessaging.SingleAcknowledge)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_command_id();
  inline void clear_has_command_id();
  inline void set_has_command_name();
  inline void clear_has_command_name();
  inline void set_has_error_message();
  inline void clear_has_error_message();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool error_;
  ::google::protobuf::uint32 command_id_;
  ::std::string* command_name_;
  ::std::string* error_message_;
  ::google::protobuf::RepeatedPtrField< ::DEMessaging::AnyParameter > parameter_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_DEServer_2eproto();
  friend void protobuf_AssignDesc_DEServer_2eproto();
  friend void protobuf_ShutdownFile_DEServer_2eproto();
  
  void InitAsDefaultInstance();
  static SingleAcknowledge* default_instance_;
};
// -------------------------------------------------------------------

class DataHeader : public ::google::protobuf::Message {
 public:
  DataHeader();
  virtual ~DataHeader();
  
  DataHeader(const DataHeader& from);
  
  inline DataHeader& operator=(const DataHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataHeader& default_instance();
  
  void Swap(DataHeader* other);
  
  // implements Message ----------------------------------------------
  
  DataHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataHeader& from);
  void MergeFrom(const DataHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 bytesize = 1;
  inline bool has_bytesize() const;
  inline void clear_bytesize();
  static const int kBytesizeFieldNumber = 1;
  inline ::google::protobuf::uint64 bytesize() const;
  inline void set_bytesize(::google::protobuf::uint64 value);
  
  // optional string identifier = 2;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 2;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const char* value, size_t size);
  inline ::std::string* mutable_identifier();
  inline ::std::string* release_identifier();
  
  // @@protoc_insertion_point(class_scope:DEMessaging.DataHeader)
 private:
  inline void set_has_bytesize();
  inline void clear_has_bytesize();
  inline void set_has_identifier();
  inline void clear_has_identifier();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 bytesize_;
  ::std::string* identifier_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_DEServer_2eproto();
  friend void protobuf_AssignDesc_DEServer_2eproto();
  friend void protobuf_ShutdownFile_DEServer_2eproto();
  
  void InitAsDefaultInstance();
  static DataHeader* default_instance_;
};
// ===================================================================


// ===================================================================

// DEPacket

// required .DEMessaging.DEPacket.Type type = 1;
inline bool DEPacket::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DEPacket::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DEPacket::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DEPacket::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::DEMessaging::DEPacket_Type DEPacket::type() const {
  return static_cast< ::DEMessaging::DEPacket_Type >(type_);
}
inline void DEPacket::set_type(::DEMessaging::DEPacket_Type value) {
  GOOGLE_DCHECK(::DEMessaging::DEPacket_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 camera_identifier = 2;
inline bool DEPacket::has_camera_identifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DEPacket::set_has_camera_identifier() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DEPacket::clear_has_camera_identifier() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DEPacket::clear_camera_identifier() {
  camera_identifier_ = 0u;
  clear_has_camera_identifier();
}
inline ::google::protobuf::uint32 DEPacket::camera_identifier() const {
  return camera_identifier_;
}
inline void DEPacket::set_camera_identifier(::google::protobuf::uint32 value) {
  set_has_camera_identifier();
  camera_identifier_ = value;
}

// repeated .DEMessaging.SingleCommand command = 3;
inline int DEPacket::command_size() const {
  return command_.size();
}
inline void DEPacket::clear_command() {
  command_.Clear();
}
inline const ::DEMessaging::SingleCommand& DEPacket::command(int index) const {
  return command_.Get(index);
}
inline ::DEMessaging::SingleCommand* DEPacket::mutable_command(int index) {
  return command_.Mutable(index);
}
inline ::DEMessaging::SingleCommand* DEPacket::add_command() {
  return command_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DEMessaging::SingleCommand >&
DEPacket::command() const {
  return command_;
}
inline ::google::protobuf::RepeatedPtrField< ::DEMessaging::SingleCommand >*
DEPacket::mutable_command() {
  return &command_;
}

// repeated .DEMessaging.SingleAcknowledge acknowledge = 4;
inline int DEPacket::acknowledge_size() const {
  return acknowledge_.size();
}
inline void DEPacket::clear_acknowledge() {
  acknowledge_.Clear();
}
inline const ::DEMessaging::SingleAcknowledge& DEPacket::acknowledge(int index) const {
  return acknowledge_.Get(index);
}
inline ::DEMessaging::SingleAcknowledge* DEPacket::mutable_acknowledge(int index) {
  return acknowledge_.Mutable(index);
}
inline ::DEMessaging::SingleAcknowledge* DEPacket::add_acknowledge() {
  return acknowledge_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DEMessaging::SingleAcknowledge >&
DEPacket::acknowledge() const {
  return acknowledge_;
}
inline ::google::protobuf::RepeatedPtrField< ::DEMessaging::SingleAcknowledge >*
DEPacket::mutable_acknowledge() {
  return &acknowledge_;
}

// optional .DEMessaging.DataHeader data_header = 5;
inline bool DEPacket::has_data_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DEPacket::set_has_data_header() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DEPacket::clear_has_data_header() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DEPacket::clear_data_header() {
  if (data_header_ != NULL) data_header_->::DEMessaging::DataHeader::Clear();
  clear_has_data_header();
}
inline const ::DEMessaging::DataHeader& DEPacket::data_header() const {
  return data_header_ != NULL ? *data_header_ : *default_instance_->data_header_;
}
inline ::DEMessaging::DataHeader* DEPacket::mutable_data_header() {
  set_has_data_header();
  if (data_header_ == NULL) data_header_ = new ::DEMessaging::DataHeader;
  return data_header_;
}
inline ::DEMessaging::DataHeader* DEPacket::release_data_header() {
  clear_has_data_header();
  ::DEMessaging::DataHeader* temp = data_header_;
  data_header_ = NULL;
  return temp;
}

// optional string camera_name = 6;
inline bool DEPacket::has_camera_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DEPacket::set_has_camera_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DEPacket::clear_has_camera_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DEPacket::clear_camera_name() {
  if (camera_name_ != &::google::protobuf::internal::kEmptyString) {
    camera_name_->clear();
  }
  clear_has_camera_name();
}
inline const ::std::string& DEPacket::camera_name() const {
  return *camera_name_;
}
inline void DEPacket::set_camera_name(const ::std::string& value) {
  set_has_camera_name();
  if (camera_name_ == &::google::protobuf::internal::kEmptyString) {
    camera_name_ = new ::std::string;
  }
  camera_name_->assign(value);
}
inline void DEPacket::set_camera_name(const char* value) {
  set_has_camera_name();
  if (camera_name_ == &::google::protobuf::internal::kEmptyString) {
    camera_name_ = new ::std::string;
  }
  camera_name_->assign(value);
}
inline void DEPacket::set_camera_name(const char* value, size_t size) {
  set_has_camera_name();
  if (camera_name_ == &::google::protobuf::internal::kEmptyString) {
    camera_name_ = new ::std::string;
  }
  camera_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DEPacket::mutable_camera_name() {
  set_has_camera_name();
  if (camera_name_ == &::google::protobuf::internal::kEmptyString) {
    camera_name_ = new ::std::string;
  }
  return camera_name_;
}
inline ::std::string* DEPacket::release_camera_name() {
  clear_has_camera_name();
  if (camera_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = camera_name_;
    camera_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SingleCommand

// optional uint32 command_id = 1;
inline bool SingleCommand::has_command_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleCommand::set_has_command_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleCommand::clear_has_command_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleCommand::clear_command_id() {
  command_id_ = 0u;
  clear_has_command_id();
}
inline ::google::protobuf::uint32 SingleCommand::command_id() const {
  return command_id_;
}
inline void SingleCommand::set_command_id(::google::protobuf::uint32 value) {
  set_has_command_id();
  command_id_ = value;
}

// optional string command_name = 2;
inline bool SingleCommand::has_command_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleCommand::set_has_command_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleCommand::clear_has_command_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleCommand::clear_command_name() {
  if (command_name_ != &::google::protobuf::internal::kEmptyString) {
    command_name_->clear();
  }
  clear_has_command_name();
}
inline const ::std::string& SingleCommand::command_name() const {
  return *command_name_;
}
inline void SingleCommand::set_command_name(const ::std::string& value) {
  set_has_command_name();
  if (command_name_ == &::google::protobuf::internal::kEmptyString) {
    command_name_ = new ::std::string;
  }
  command_name_->assign(value);
}
inline void SingleCommand::set_command_name(const char* value) {
  set_has_command_name();
  if (command_name_ == &::google::protobuf::internal::kEmptyString) {
    command_name_ = new ::std::string;
  }
  command_name_->assign(value);
}
inline void SingleCommand::set_command_name(const char* value, size_t size) {
  set_has_command_name();
  if (command_name_ == &::google::protobuf::internal::kEmptyString) {
    command_name_ = new ::std::string;
  }
  command_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SingleCommand::mutable_command_name() {
  set_has_command_name();
  if (command_name_ == &::google::protobuf::internal::kEmptyString) {
    command_name_ = new ::std::string;
  }
  return command_name_;
}
inline ::std::string* SingleCommand::release_command_name() {
  clear_has_command_name();
  if (command_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = command_name_;
    command_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .DEMessaging.AnyParameter parameter = 3;
inline int SingleCommand::parameter_size() const {
  return parameter_.size();
}
inline void SingleCommand::clear_parameter() {
  parameter_.Clear();
}
inline const ::DEMessaging::AnyParameter& SingleCommand::parameter(int index) const {
  return parameter_.Get(index);
}
inline ::DEMessaging::AnyParameter* SingleCommand::mutable_parameter(int index) {
  return parameter_.Mutable(index);
}
inline ::DEMessaging::AnyParameter* SingleCommand::add_parameter() {
  return parameter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DEMessaging::AnyParameter >&
SingleCommand::parameter() const {
  return parameter_;
}
inline ::google::protobuf::RepeatedPtrField< ::DEMessaging::AnyParameter >*
SingleCommand::mutable_parameter() {
  return &parameter_;
}

// -------------------------------------------------------------------

// AnyParameter

// required .DEMessaging.AnyParameter.Type type = 1;
inline bool AnyParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnyParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnyParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnyParameter::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::DEMessaging::AnyParameter_Type AnyParameter::type() const {
  return static_cast< ::DEMessaging::AnyParameter_Type >(type_);
}
inline void AnyParameter::set_type(::DEMessaging::AnyParameter_Type value) {
  GOOGLE_DCHECK(::DEMessaging::AnyParameter_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string name = 2;
inline bool AnyParameter::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnyParameter::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnyParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnyParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AnyParameter::name() const {
  return *name_;
}
inline void AnyParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AnyParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AnyParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AnyParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* AnyParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional sint32 p_int = 3;
inline bool AnyParameter::has_p_int() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnyParameter::set_has_p_int() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnyParameter::clear_has_p_int() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnyParameter::clear_p_int() {
  p_int_ = 0;
  clear_has_p_int();
}
inline ::google::protobuf::int32 AnyParameter::p_int() const {
  return p_int_;
}
inline void AnyParameter::set_p_int(::google::protobuf::int32 value) {
  set_has_p_int();
  p_int_ = value;
}

// optional bool p_bool = 4;
inline bool AnyParameter::has_p_bool() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AnyParameter::set_has_p_bool() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AnyParameter::clear_has_p_bool() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AnyParameter::clear_p_bool() {
  p_bool_ = false;
  clear_has_p_bool();
}
inline bool AnyParameter::p_bool() const {
  return p_bool_;
}
inline void AnyParameter::set_p_bool(bool value) {
  set_has_p_bool();
  p_bool_ = value;
}

// optional string p_string = 5;
inline bool AnyParameter::has_p_string() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AnyParameter::set_has_p_string() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AnyParameter::clear_has_p_string() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AnyParameter::clear_p_string() {
  if (p_string_ != &::google::protobuf::internal::kEmptyString) {
    p_string_->clear();
  }
  clear_has_p_string();
}
inline const ::std::string& AnyParameter::p_string() const {
  return *p_string_;
}
inline void AnyParameter::set_p_string(const ::std::string& value) {
  set_has_p_string();
  if (p_string_ == &::google::protobuf::internal::kEmptyString) {
    p_string_ = new ::std::string;
  }
  p_string_->assign(value);
}
inline void AnyParameter::set_p_string(const char* value) {
  set_has_p_string();
  if (p_string_ == &::google::protobuf::internal::kEmptyString) {
    p_string_ = new ::std::string;
  }
  p_string_->assign(value);
}
inline void AnyParameter::set_p_string(const char* value, size_t size) {
  set_has_p_string();
  if (p_string_ == &::google::protobuf::internal::kEmptyString) {
    p_string_ = new ::std::string;
  }
  p_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AnyParameter::mutable_p_string() {
  set_has_p_string();
  if (p_string_ == &::google::protobuf::internal::kEmptyString) {
    p_string_ = new ::std::string;
  }
  return p_string_;
}
inline ::std::string* AnyParameter::release_p_string() {
  clear_has_p_string();
  if (p_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = p_string_;
    p_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float p_float = 6;
inline bool AnyParameter::has_p_float() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AnyParameter::set_has_p_float() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AnyParameter::clear_has_p_float() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AnyParameter::clear_p_float() {
  p_float_ = 0;
  clear_has_p_float();
}
inline float AnyParameter::p_float() const {
  return p_float_;
}
inline void AnyParameter::set_p_float(float value) {
  set_has_p_float();
  p_float_ = value;
}

// optional bytes p_bytes = 7;
inline bool AnyParameter::has_p_bytes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AnyParameter::set_has_p_bytes() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AnyParameter::clear_has_p_bytes() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AnyParameter::clear_p_bytes() {
  if (p_bytes_ != &::google::protobuf::internal::kEmptyString) {
    p_bytes_->clear();
  }
  clear_has_p_bytes();
}
inline const ::std::string& AnyParameter::p_bytes() const {
  return *p_bytes_;
}
inline void AnyParameter::set_p_bytes(const ::std::string& value) {
  set_has_p_bytes();
  if (p_bytes_ == &::google::protobuf::internal::kEmptyString) {
    p_bytes_ = new ::std::string;
  }
  p_bytes_->assign(value);
}
inline void AnyParameter::set_p_bytes(const char* value) {
  set_has_p_bytes();
  if (p_bytes_ == &::google::protobuf::internal::kEmptyString) {
    p_bytes_ = new ::std::string;
  }
  p_bytes_->assign(value);
}
inline void AnyParameter::set_p_bytes(const void* value, size_t size) {
  set_has_p_bytes();
  if (p_bytes_ == &::google::protobuf::internal::kEmptyString) {
    p_bytes_ = new ::std::string;
  }
  p_bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AnyParameter::mutable_p_bytes() {
  set_has_p_bytes();
  if (p_bytes_ == &::google::protobuf::internal::kEmptyString) {
    p_bytes_ = new ::std::string;
  }
  return p_bytes_;
}
inline ::std::string* AnyParameter::release_p_bytes() {
  clear_has_p_bytes();
  if (p_bytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = p_bytes_;
    p_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Acknowledge

// optional uint32 camera_identifier = 1;
inline bool Acknowledge::has_camera_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Acknowledge::set_has_camera_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Acknowledge::clear_has_camera_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Acknowledge::clear_camera_identifier() {
  camera_identifier_ = 0u;
  clear_has_camera_identifier();
}
inline ::google::protobuf::uint32 Acknowledge::camera_identifier() const {
  return camera_identifier_;
}
inline void Acknowledge::set_camera_identifier(::google::protobuf::uint32 value) {
  set_has_camera_identifier();
  camera_identifier_ = value;
}

// repeated .DEMessaging.SingleAcknowledge acknowledge = 2;
inline int Acknowledge::acknowledge_size() const {
  return acknowledge_.size();
}
inline void Acknowledge::clear_acknowledge() {
  acknowledge_.Clear();
}
inline const ::DEMessaging::SingleAcknowledge& Acknowledge::acknowledge(int index) const {
  return acknowledge_.Get(index);
}
inline ::DEMessaging::SingleAcknowledge* Acknowledge::mutable_acknowledge(int index) {
  return acknowledge_.Mutable(index);
}
inline ::DEMessaging::SingleAcknowledge* Acknowledge::add_acknowledge() {
  return acknowledge_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DEMessaging::SingleAcknowledge >&
Acknowledge::acknowledge() const {
  return acknowledge_;
}
inline ::google::protobuf::RepeatedPtrField< ::DEMessaging::SingleAcknowledge >*
Acknowledge::mutable_acknowledge() {
  return &acknowledge_;
}

// -------------------------------------------------------------------

// SingleAcknowledge

// required bool error = 1;
inline bool SingleAcknowledge::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleAcknowledge::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleAcknowledge::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleAcknowledge::clear_error() {
  error_ = false;
  clear_has_error();
}
inline bool SingleAcknowledge::error() const {
  return error_;
}
inline void SingleAcknowledge::set_error(bool value) {
  set_has_error();
  error_ = value;
}

// optional uint32 command_id = 2;
inline bool SingleAcknowledge::has_command_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleAcknowledge::set_has_command_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleAcknowledge::clear_has_command_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleAcknowledge::clear_command_id() {
  command_id_ = 0u;
  clear_has_command_id();
}
inline ::google::protobuf::uint32 SingleAcknowledge::command_id() const {
  return command_id_;
}
inline void SingleAcknowledge::set_command_id(::google::protobuf::uint32 value) {
  set_has_command_id();
  command_id_ = value;
}

// optional string command_name = 3;
inline bool SingleAcknowledge::has_command_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SingleAcknowledge::set_has_command_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SingleAcknowledge::clear_has_command_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SingleAcknowledge::clear_command_name() {
  if (command_name_ != &::google::protobuf::internal::kEmptyString) {
    command_name_->clear();
  }
  clear_has_command_name();
}
inline const ::std::string& SingleAcknowledge::command_name() const {
  return *command_name_;
}
inline void SingleAcknowledge::set_command_name(const ::std::string& value) {
  set_has_command_name();
  if (command_name_ == &::google::protobuf::internal::kEmptyString) {
    command_name_ = new ::std::string;
  }
  command_name_->assign(value);
}
inline void SingleAcknowledge::set_command_name(const char* value) {
  set_has_command_name();
  if (command_name_ == &::google::protobuf::internal::kEmptyString) {
    command_name_ = new ::std::string;
  }
  command_name_->assign(value);
}
inline void SingleAcknowledge::set_command_name(const char* value, size_t size) {
  set_has_command_name();
  if (command_name_ == &::google::protobuf::internal::kEmptyString) {
    command_name_ = new ::std::string;
  }
  command_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SingleAcknowledge::mutable_command_name() {
  set_has_command_name();
  if (command_name_ == &::google::protobuf::internal::kEmptyString) {
    command_name_ = new ::std::string;
  }
  return command_name_;
}
inline ::std::string* SingleAcknowledge::release_command_name() {
  clear_has_command_name();
  if (command_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = command_name_;
    command_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string error_message = 4;
inline bool SingleAcknowledge::has_error_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SingleAcknowledge::set_has_error_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SingleAcknowledge::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SingleAcknowledge::clear_error_message() {
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    error_message_->clear();
  }
  clear_has_error_message();
}
inline const ::std::string& SingleAcknowledge::error_message() const {
  return *error_message_;
}
inline void SingleAcknowledge::set_error_message(const ::std::string& value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void SingleAcknowledge::set_error_message(const char* value) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(value);
}
inline void SingleAcknowledge::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  error_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SingleAcknowledge::mutable_error_message() {
  set_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    error_message_ = new ::std::string;
  }
  return error_message_;
}
inline ::std::string* SingleAcknowledge::release_error_message() {
  clear_has_error_message();
  if (error_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_message_;
    error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .DEMessaging.AnyParameter parameter = 5;
inline int SingleAcknowledge::parameter_size() const {
  return parameter_.size();
}
inline void SingleAcknowledge::clear_parameter() {
  parameter_.Clear();
}
inline const ::DEMessaging::AnyParameter& SingleAcknowledge::parameter(int index) const {
  return parameter_.Get(index);
}
inline ::DEMessaging::AnyParameter* SingleAcknowledge::mutable_parameter(int index) {
  return parameter_.Mutable(index);
}
inline ::DEMessaging::AnyParameter* SingleAcknowledge::add_parameter() {
  return parameter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DEMessaging::AnyParameter >&
SingleAcknowledge::parameter() const {
  return parameter_;
}
inline ::google::protobuf::RepeatedPtrField< ::DEMessaging::AnyParameter >*
SingleAcknowledge::mutable_parameter() {
  return &parameter_;
}

// -------------------------------------------------------------------

// DataHeader

// required uint64 bytesize = 1;
inline bool DataHeader::has_bytesize() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataHeader::set_has_bytesize() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataHeader::clear_has_bytesize() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataHeader::clear_bytesize() {
  bytesize_ = GOOGLE_ULONGLONG(0);
  clear_has_bytesize();
}
inline ::google::protobuf::uint64 DataHeader::bytesize() const {
  return bytesize_;
}
inline void DataHeader::set_bytesize(::google::protobuf::uint64 value) {
  set_has_bytesize();
  bytesize_ = value;
}

// optional string identifier = 2;
inline bool DataHeader::has_identifier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataHeader::set_has_identifier() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataHeader::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataHeader::clear_identifier() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    identifier_->clear();
  }
  clear_has_identifier();
}
inline const ::std::string& DataHeader::identifier() const {
  return *identifier_;
}
inline void DataHeader::set_identifier(const ::std::string& value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void DataHeader::set_identifier(const char* value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void DataHeader::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataHeader::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  return identifier_;
}
inline ::std::string* DataHeader::release_identifier() {
  clear_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identifier_;
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DEMessaging

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DEMessaging::DEPacket_Type>() {
  return ::DEMessaging::DEPacket_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DEMessaging::AnyParameter_Type>() {
  return ::DEMessaging::AnyParameter_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DEServer_2eproto__INCLUDED
