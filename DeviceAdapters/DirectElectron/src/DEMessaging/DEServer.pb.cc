// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DEServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DEMessaging {

namespace {

const ::google::protobuf::Descriptor* DEPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DEPacket_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DEPacket_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SingleCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnyParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnyParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AnyParameter_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Acknowledge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Acknowledge_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleAcknowledge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleAcknowledge_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataHeader_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DEServer_2eproto() {
  protobuf_AddDesc_DEServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DEServer.proto");
  GOOGLE_CHECK(file != NULL);
  DEPacket_descriptor_ = file->message_type(0);
  static const int DEPacket_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEPacket, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEPacket, camera_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEPacket, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEPacket, acknowledge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEPacket, data_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEPacket, camera_name_),
  };
  DEPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DEPacket_descriptor_,
      DEPacket::default_instance_,
      DEPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DEPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DEPacket));
  DEPacket_Type_descriptor_ = DEPacket_descriptor_->enum_type(0);
  SingleCommand_descriptor_ = file->message_type(1);
  static const int SingleCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCommand, command_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCommand, command_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCommand, parameter_),
  };
  SingleCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleCommand_descriptor_,
      SingleCommand::default_instance_,
      SingleCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleCommand));
  AnyParameter_descriptor_ = file->message_type(2);
  static const int AnyParameter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyParameter, p_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyParameter, p_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyParameter, p_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyParameter, p_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyParameter, p_bytes_),
  };
  AnyParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnyParameter_descriptor_,
      AnyParameter::default_instance_,
      AnyParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnyParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnyParameter));
  AnyParameter_Type_descriptor_ = AnyParameter_descriptor_->enum_type(0);
  Acknowledge_descriptor_ = file->message_type(3);
  static const int Acknowledge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acknowledge, camera_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acknowledge, acknowledge_),
  };
  Acknowledge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Acknowledge_descriptor_,
      Acknowledge::default_instance_,
      Acknowledge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acknowledge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Acknowledge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Acknowledge));
  SingleAcknowledge_descriptor_ = file->message_type(4);
  static const int SingleAcknowledge_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAcknowledge, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAcknowledge, command_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAcknowledge, command_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAcknowledge, error_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAcknowledge, parameter_),
  };
  SingleAcknowledge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleAcknowledge_descriptor_,
      SingleAcknowledge::default_instance_,
      SingleAcknowledge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAcknowledge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAcknowledge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleAcknowledge));
  DataHeader_descriptor_ = file->message_type(5);
  static const int DataHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataHeader, bytesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataHeader, identifier_),
  };
  DataHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataHeader_descriptor_,
      DataHeader::default_instance_,
      DataHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataHeader));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DEServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DEPacket_descriptor_, &DEPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleCommand_descriptor_, &SingleCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnyParameter_descriptor_, &AnyParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Acknowledge_descriptor_, &Acknowledge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleAcknowledge_descriptor_, &SingleAcknowledge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataHeader_descriptor_, &DataHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DEServer_2eproto() {
  delete DEPacket::default_instance_;
  delete DEPacket_reflection_;
  delete SingleCommand::default_instance_;
  delete SingleCommand_reflection_;
  delete AnyParameter::default_instance_;
  delete AnyParameter_reflection_;
  delete Acknowledge::default_instance_;
  delete Acknowledge_reflection_;
  delete SingleAcknowledge::default_instance_;
  delete SingleAcknowledge_reflection_;
  delete DataHeader::default_instance_;
  delete DataHeader_reflection_;
}

void protobuf_AddDesc_DEServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016DEServer.proto\022\013DEMessaging\"\261\002\n\010DEPack"
    "et\022(\n\004type\030\001 \002(\0162\032.DEMessaging.DEPacket."
    "Type\022\031\n\021camera_identifier\030\002 \001(\r\022+\n\007comma"
    "nd\030\003 \003(\0132\032.DEMessaging.SingleCommand\0223\n\013"
    "acknowledge\030\004 \003(\0132\036.DEMessaging.SingleAc"
    "knowledge\022,\n\013data_header\030\005 \001(\0132\027.DEMessa"
    "ging.DataHeader\022\023\n\013camera_name\030\006 \001(\t\";\n\004"
    "Type\022\r\n\tP_COMMAND\020\001\022\021\n\rP_ACKNOWLEDGE\020\002\022\021"
    "\n\rP_DATA_HEADER\020\003\"g\n\rSingleCommand\022\022\n\nco"
    "mmand_id\030\001 \001(\r\022\024\n\014command_name\030\002 \001(\t\022,\n\t"
    "parameter\030\003 \003(\0132\031.DEMessaging.AnyParamet"
    "er\"\344\001\n\014AnyParameter\022,\n\004type\030\001 \002(\0162\036.DEMe"
    "ssaging.AnyParameter.Type\022\014\n\004name\030\002 \001(\t\022"
    "\r\n\005p_int\030\003 \001(\021\022\016\n\006p_bool\030\004 \001(\010\022\020\n\010p_stri"
    "ng\030\005 \001(\t\022\017\n\007p_float\030\006 \001(\002\022\017\n\007p_bytes\030\007 \001"
    "(\014\"E\n\004Type\022\t\n\005P_INT\020\001\022\n\n\006P_BOOL\020\002\022\014\n\010P_S"
    "TRING\020\003\022\013\n\007P_FLOAT\020\004\022\013\n\007P_BYTES\020\005\"]\n\013Ack"
    "nowledge\022\031\n\021camera_identifier\030\001 \001(\r\0223\n\013a"
    "cknowledge\030\002 \003(\0132\036.DEMessaging.SingleAck"
    "nowledge\"\221\001\n\021SingleAcknowledge\022\r\n\005error\030"
    "\001 \002(\010\022\022\n\ncommand_id\030\002 \001(\r\022\024\n\014command_nam"
    "e\030\003 \001(\t\022\025\n\rerror_message\030\004 \001(\t\022,\n\tparame"
    "ter\030\005 \003(\0132\031.DEMessaging.AnyParameter\"2\n\n"
    "DataHeader\022\020\n\010bytesize\030\001 \002(\004\022\022\n\nidentifi"
    "er\030\002 \001(\t", 968);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DEServer.proto", &protobuf_RegisterTypes);
  DEPacket::default_instance_ = new DEPacket();
  SingleCommand::default_instance_ = new SingleCommand();
  AnyParameter::default_instance_ = new AnyParameter();
  Acknowledge::default_instance_ = new Acknowledge();
  SingleAcknowledge::default_instance_ = new SingleAcknowledge();
  DataHeader::default_instance_ = new DataHeader();
  DEPacket::default_instance_->InitAsDefaultInstance();
  SingleCommand::default_instance_->InitAsDefaultInstance();
  AnyParameter::default_instance_->InitAsDefaultInstance();
  Acknowledge::default_instance_->InitAsDefaultInstance();
  SingleAcknowledge::default_instance_->InitAsDefaultInstance();
  DataHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DEServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DEServer_2eproto {
  StaticDescriptorInitializer_DEServer_2eproto() {
    protobuf_AddDesc_DEServer_2eproto();
  }
} static_descriptor_initializer_DEServer_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* DEPacket_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DEPacket_Type_descriptor_;
}
bool DEPacket_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DEPacket_Type DEPacket::P_COMMAND;
const DEPacket_Type DEPacket::P_ACKNOWLEDGE;
const DEPacket_Type DEPacket::P_DATA_HEADER;
const DEPacket_Type DEPacket::Type_MIN;
const DEPacket_Type DEPacket::Type_MAX;
const int DEPacket::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DEPacket::kTypeFieldNumber;
const int DEPacket::kCameraIdentifierFieldNumber;
const int DEPacket::kCommandFieldNumber;
const int DEPacket::kAcknowledgeFieldNumber;
const int DEPacket::kDataHeaderFieldNumber;
const int DEPacket::kCameraNameFieldNumber;
#endif  // !_MSC_VER

DEPacket::DEPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DEPacket::InitAsDefaultInstance() {
  data_header_ = const_cast< ::DEMessaging::DataHeader*>(&::DEMessaging::DataHeader::default_instance());
}

DEPacket::DEPacket(const DEPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DEPacket::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  camera_identifier_ = 0u;
  data_header_ = NULL;
  camera_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DEPacket::~DEPacket() {
  SharedDtor();
}

void DEPacket::SharedDtor() {
  if (camera_name_ != &::google::protobuf::internal::kEmptyString) {
    delete camera_name_;
  }
  if (this != default_instance_) {
    delete data_header_;
  }
}

void DEPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DEPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DEPacket_descriptor_;
}

const DEPacket& DEPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DEServer_2eproto();  return *default_instance_;
}

DEPacket* DEPacket::default_instance_ = NULL;

DEPacket* DEPacket::New() const {
  return new DEPacket;
}

void DEPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    camera_identifier_ = 0u;
    if (has_data_header()) {
      if (data_header_ != NULL) data_header_->::DEMessaging::DataHeader::Clear();
    }
    if (has_camera_name()) {
      if (camera_name_ != &::google::protobuf::internal::kEmptyString) {
        camera_name_->clear();
      }
    }
  }
  command_.Clear();
  acknowledge_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DEPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DEMessaging.DEPacket.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DEMessaging::DEPacket_Type_IsValid(value)) {
            set_type(static_cast< ::DEMessaging::DEPacket_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_camera_identifier;
        break;
      }
      
      // optional uint32 camera_identifier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camera_identifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_identifier_)));
          set_has_camera_identifier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_command;
        break;
      }
      
      // repeated .DEMessaging.SingleCommand command = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_command;
        if (input->ExpectTag(34)) goto parse_acknowledge;
        break;
      }
      
      // repeated .DEMessaging.SingleAcknowledge acknowledge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acknowledge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acknowledge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_acknowledge;
        if (input->ExpectTag(42)) goto parse_data_header;
        break;
      }
      
      // optional .DEMessaging.DataHeader data_header = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_camera_name;
        break;
      }
      
      // optional string camera_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camera_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->camera_name().data(), this->camera_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DEPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DEMessaging.DEPacket.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional uint32 camera_identifier = 2;
  if (has_camera_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->camera_identifier(), output);
  }
  
  // repeated .DEMessaging.SingleCommand command = 3;
  for (int i = 0; i < this->command_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->command(i), output);
  }
  
  // repeated .DEMessaging.SingleAcknowledge acknowledge = 4;
  for (int i = 0; i < this->acknowledge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->acknowledge(i), output);
  }
  
  // optional .DEMessaging.DataHeader data_header = 5;
  if (has_data_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data_header(), output);
  }
  
  // optional string camera_name = 6;
  if (has_camera_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->camera_name().data(), this->camera_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->camera_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DEPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DEMessaging.DEPacket.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional uint32 camera_identifier = 2;
  if (has_camera_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->camera_identifier(), target);
  }
  
  // repeated .DEMessaging.SingleCommand command = 3;
  for (int i = 0; i < this->command_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->command(i), target);
  }
  
  // repeated .DEMessaging.SingleAcknowledge acknowledge = 4;
  for (int i = 0; i < this->acknowledge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->acknowledge(i), target);
  }
  
  // optional .DEMessaging.DataHeader data_header = 5;
  if (has_data_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data_header(), target);
  }
  
  // optional string camera_name = 6;
  if (has_camera_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->camera_name().data(), this->camera_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->camera_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DEPacket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DEMessaging.DEPacket.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional uint32 camera_identifier = 2;
    if (has_camera_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camera_identifier());
    }
    
    // optional .DEMessaging.DataHeader data_header = 5;
    if (has_data_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_header());
    }
    
    // optional string camera_name = 6;
    if (has_camera_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camera_name());
    }
    
  }
  // repeated .DEMessaging.SingleCommand command = 3;
  total_size += 1 * this->command_size();
  for (int i = 0; i < this->command_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->command(i));
  }
  
  // repeated .DEMessaging.SingleAcknowledge acknowledge = 4;
  total_size += 1 * this->acknowledge_size();
  for (int i = 0; i < this->acknowledge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acknowledge(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DEPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DEPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DEPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DEPacket::MergeFrom(const DEPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  command_.MergeFrom(from.command_);
  acknowledge_.MergeFrom(from.acknowledge_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_camera_identifier()) {
      set_camera_identifier(from.camera_identifier());
    }
    if (from.has_data_header()) {
      mutable_data_header()->::DEMessaging::DataHeader::MergeFrom(from.data_header());
    }
    if (from.has_camera_name()) {
      set_camera_name(from.camera_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DEPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DEPacket::CopyFrom(const DEPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DEPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < command_size(); i++) {
    if (!this->command(i).IsInitialized()) return false;
  }
  for (int i = 0; i < acknowledge_size(); i++) {
    if (!this->acknowledge(i).IsInitialized()) return false;
  }
  if (has_data_header()) {
    if (!this->data_header().IsInitialized()) return false;
  }
  return true;
}

void DEPacket::Swap(DEPacket* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(camera_identifier_, other->camera_identifier_);
    command_.Swap(&other->command_);
    acknowledge_.Swap(&other->acknowledge_);
    std::swap(data_header_, other->data_header_);
    std::swap(camera_name_, other->camera_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DEPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DEPacket_descriptor_;
  metadata.reflection = DEPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleCommand::kCommandIdFieldNumber;
const int SingleCommand::kCommandNameFieldNumber;
const int SingleCommand::kParameterFieldNumber;
#endif  // !_MSC_VER

SingleCommand::SingleCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleCommand::InitAsDefaultInstance() {
}

SingleCommand::SingleCommand(const SingleCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleCommand::SharedCtor() {
  _cached_size_ = 0;
  command_id_ = 0u;
  command_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleCommand::~SingleCommand() {
  SharedDtor();
}

void SingleCommand::SharedDtor() {
  if (command_name_ != &::google::protobuf::internal::kEmptyString) {
    delete command_name_;
  }
  if (this != default_instance_) {
  }
}

void SingleCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleCommand_descriptor_;
}

const SingleCommand& SingleCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DEServer_2eproto();  return *default_instance_;
}

SingleCommand* SingleCommand::default_instance_ = NULL;

SingleCommand* SingleCommand::New() const {
  return new SingleCommand;
}

void SingleCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_id_ = 0u;
    if (has_command_name()) {
      if (command_name_ != &::google::protobuf::internal::kEmptyString) {
        command_name_->clear();
      }
    }
  }
  parameter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 command_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &command_id_)));
          set_has_command_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_command_name;
        break;
      }
      
      // optional string command_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command_name().data(), this->command_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parameter;
        break;
      }
      
      // repeated .DEMessaging.AnyParameter parameter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parameter;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 command_id = 1;
  if (has_command_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->command_id(), output);
  }
  
  // optional string command_name = 2;
  if (has_command_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command_name().data(), this->command_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->command_name(), output);
  }
  
  // repeated .DEMessaging.AnyParameter parameter = 3;
  for (int i = 0; i < this->parameter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->parameter(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 command_id = 1;
  if (has_command_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->command_id(), target);
  }
  
  // optional string command_name = 2;
  if (has_command_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command_name().data(), this->command_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->command_name(), target);
  }
  
  // repeated .DEMessaging.AnyParameter parameter = 3;
  for (int i = 0; i < this->parameter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parameter(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 command_id = 1;
    if (has_command_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->command_id());
    }
    
    // optional string command_name = 2;
    if (has_command_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command_name());
    }
    
  }
  // repeated .DEMessaging.AnyParameter parameter = 3;
  total_size += 1 * this->parameter_size();
  for (int i = 0; i < this->parameter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameter(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleCommand::MergeFrom(const SingleCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameter_.MergeFrom(from.parameter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command_id()) {
      set_command_id(from.command_id());
    }
    if (from.has_command_name()) {
      set_command_name(from.command_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleCommand::CopyFrom(const SingleCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleCommand::IsInitialized() const {
  
  for (int i = 0; i < parameter_size(); i++) {
    if (!this->parameter(i).IsInitialized()) return false;
  }
  return true;
}

void SingleCommand::Swap(SingleCommand* other) {
  if (other != this) {
    std::swap(command_id_, other->command_id_);
    std::swap(command_name_, other->command_name_);
    parameter_.Swap(&other->parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleCommand_descriptor_;
  metadata.reflection = SingleCommand_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AnyParameter_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnyParameter_Type_descriptor_;
}
bool AnyParameter_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AnyParameter_Type AnyParameter::P_INT;
const AnyParameter_Type AnyParameter::P_BOOL;
const AnyParameter_Type AnyParameter::P_STRING;
const AnyParameter_Type AnyParameter::P_FLOAT;
const AnyParameter_Type AnyParameter::P_BYTES;
const AnyParameter_Type AnyParameter::Type_MIN;
const AnyParameter_Type AnyParameter::Type_MAX;
const int AnyParameter::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AnyParameter::kTypeFieldNumber;
const int AnyParameter::kNameFieldNumber;
const int AnyParameter::kPIntFieldNumber;
const int AnyParameter::kPBoolFieldNumber;
const int AnyParameter::kPStringFieldNumber;
const int AnyParameter::kPFloatFieldNumber;
const int AnyParameter::kPBytesFieldNumber;
#endif  // !_MSC_VER

AnyParameter::AnyParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnyParameter::InitAsDefaultInstance() {
}

AnyParameter::AnyParameter(const AnyParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnyParameter::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  p_int_ = 0;
  p_bool_ = false;
  p_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  p_float_ = 0;
  p_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnyParameter::~AnyParameter() {
  SharedDtor();
}

void AnyParameter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (p_string_ != &::google::protobuf::internal::kEmptyString) {
    delete p_string_;
  }
  if (p_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete p_bytes_;
  }
  if (this != default_instance_) {
  }
}

void AnyParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnyParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnyParameter_descriptor_;
}

const AnyParameter& AnyParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DEServer_2eproto();  return *default_instance_;
}

AnyParameter* AnyParameter::default_instance_ = NULL;

AnyParameter* AnyParameter::New() const {
  return new AnyParameter;
}

void AnyParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    p_int_ = 0;
    p_bool_ = false;
    if (has_p_string()) {
      if (p_string_ != &::google::protobuf::internal::kEmptyString) {
        p_string_->clear();
      }
    }
    p_float_ = 0;
    if (has_p_bytes()) {
      if (p_bytes_ != &::google::protobuf::internal::kEmptyString) {
        p_bytes_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnyParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DEMessaging.AnyParameter.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DEMessaging::AnyParameter_Type_IsValid(value)) {
            set_type(static_cast< ::DEMessaging::AnyParameter_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_p_int;
        break;
      }
      
      // optional sint32 p_int = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_p_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &p_int_)));
          set_has_p_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_p_bool;
        break;
      }
      
      // optional bool p_bool = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_p_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &p_bool_)));
          set_has_p_bool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_p_string;
        break;
      }
      
      // optional string p_string = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_p_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_p_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->p_string().data(), this->p_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_p_float;
        break;
      }
      
      // optional float p_float = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_p_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_float_)));
          set_has_p_float();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_p_bytes;
        break;
      }
      
      // optional bytes p_bytes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_p_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_p_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnyParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DEMessaging.AnyParameter.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional sint32 p_int = 3;
  if (has_p_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->p_int(), output);
  }
  
  // optional bool p_bool = 4;
  if (has_p_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->p_bool(), output);
  }
  
  // optional string p_string = 5;
  if (has_p_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->p_string().data(), this->p_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->p_string(), output);
  }
  
  // optional float p_float = 6;
  if (has_p_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->p_float(), output);
  }
  
  // optional bytes p_bytes = 7;
  if (has_p_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->p_bytes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnyParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DEMessaging.AnyParameter.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional sint32 p_int = 3;
  if (has_p_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->p_int(), target);
  }
  
  // optional bool p_bool = 4;
  if (has_p_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->p_bool(), target);
  }
  
  // optional string p_string = 5;
  if (has_p_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->p_string().data(), this->p_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->p_string(), target);
  }
  
  // optional float p_float = 6;
  if (has_p_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->p_float(), target);
  }
  
  // optional bytes p_bytes = 7;
  if (has_p_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->p_bytes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnyParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DEMessaging.AnyParameter.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional sint32 p_int = 3;
    if (has_p_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->p_int());
    }
    
    // optional bool p_bool = 4;
    if (has_p_bool()) {
      total_size += 1 + 1;
    }
    
    // optional string p_string = 5;
    if (has_p_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->p_string());
    }
    
    // optional float p_float = 6;
    if (has_p_float()) {
      total_size += 1 + 4;
    }
    
    // optional bytes p_bytes = 7;
    if (has_p_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->p_bytes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnyParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnyParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnyParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnyParameter::MergeFrom(const AnyParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_p_int()) {
      set_p_int(from.p_int());
    }
    if (from.has_p_bool()) {
      set_p_bool(from.p_bool());
    }
    if (from.has_p_string()) {
      set_p_string(from.p_string());
    }
    if (from.has_p_float()) {
      set_p_float(from.p_float());
    }
    if (from.has_p_bytes()) {
      set_p_bytes(from.p_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnyParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyParameter::CopyFrom(const AnyParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AnyParameter::Swap(AnyParameter* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(p_int_, other->p_int_);
    std::swap(p_bool_, other->p_bool_);
    std::swap(p_string_, other->p_string_);
    std::swap(p_float_, other->p_float_);
    std::swap(p_bytes_, other->p_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnyParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnyParameter_descriptor_;
  metadata.reflection = AnyParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Acknowledge::kCameraIdentifierFieldNumber;
const int Acknowledge::kAcknowledgeFieldNumber;
#endif  // !_MSC_VER

Acknowledge::Acknowledge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Acknowledge::InitAsDefaultInstance() {
}

Acknowledge::Acknowledge(const Acknowledge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Acknowledge::SharedCtor() {
  _cached_size_ = 0;
  camera_identifier_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Acknowledge::~Acknowledge() {
  SharedDtor();
}

void Acknowledge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Acknowledge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Acknowledge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Acknowledge_descriptor_;
}

const Acknowledge& Acknowledge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DEServer_2eproto();  return *default_instance_;
}

Acknowledge* Acknowledge::default_instance_ = NULL;

Acknowledge* Acknowledge::New() const {
  return new Acknowledge;
}

void Acknowledge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camera_identifier_ = 0u;
  }
  acknowledge_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Acknowledge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 camera_identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_identifier_)));
          set_has_camera_identifier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_acknowledge;
        break;
      }
      
      // repeated .DEMessaging.SingleAcknowledge acknowledge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acknowledge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acknowledge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_acknowledge;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Acknowledge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 camera_identifier = 1;
  if (has_camera_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camera_identifier(), output);
  }
  
  // repeated .DEMessaging.SingleAcknowledge acknowledge = 2;
  for (int i = 0; i < this->acknowledge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->acknowledge(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Acknowledge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 camera_identifier = 1;
  if (has_camera_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camera_identifier(), target);
  }
  
  // repeated .DEMessaging.SingleAcknowledge acknowledge = 2;
  for (int i = 0; i < this->acknowledge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->acknowledge(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Acknowledge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 camera_identifier = 1;
    if (has_camera_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camera_identifier());
    }
    
  }
  // repeated .DEMessaging.SingleAcknowledge acknowledge = 2;
  total_size += 1 * this->acknowledge_size();
  for (int i = 0; i < this->acknowledge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acknowledge(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Acknowledge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Acknowledge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Acknowledge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Acknowledge::MergeFrom(const Acknowledge& from) {
  GOOGLE_CHECK_NE(&from, this);
  acknowledge_.MergeFrom(from.acknowledge_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camera_identifier()) {
      set_camera_identifier(from.camera_identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Acknowledge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Acknowledge::CopyFrom(const Acknowledge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acknowledge::IsInitialized() const {
  
  for (int i = 0; i < acknowledge_size(); i++) {
    if (!this->acknowledge(i).IsInitialized()) return false;
  }
  return true;
}

void Acknowledge::Swap(Acknowledge* other) {
  if (other != this) {
    std::swap(camera_identifier_, other->camera_identifier_);
    acknowledge_.Swap(&other->acknowledge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Acknowledge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Acknowledge_descriptor_;
  metadata.reflection = Acknowledge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleAcknowledge::kErrorFieldNumber;
const int SingleAcknowledge::kCommandIdFieldNumber;
const int SingleAcknowledge::kCommandNameFieldNumber;
const int SingleAcknowledge::kErrorMessageFieldNumber;
const int SingleAcknowledge::kParameterFieldNumber;
#endif  // !_MSC_VER

SingleAcknowledge::SingleAcknowledge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleAcknowledge::InitAsDefaultInstance() {
}

SingleAcknowledge::SingleAcknowledge(const SingleAcknowledge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleAcknowledge::SharedCtor() {
  _cached_size_ = 0;
  error_ = false;
  command_id_ = 0u;
  command_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleAcknowledge::~SingleAcknowledge() {
  SharedDtor();
}

void SingleAcknowledge::SharedDtor() {
  if (command_name_ != &::google::protobuf::internal::kEmptyString) {
    delete command_name_;
  }
  if (error_message_ != &::google::protobuf::internal::kEmptyString) {
    delete error_message_;
  }
  if (this != default_instance_) {
  }
}

void SingleAcknowledge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleAcknowledge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleAcknowledge_descriptor_;
}

const SingleAcknowledge& SingleAcknowledge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DEServer_2eproto();  return *default_instance_;
}

SingleAcknowledge* SingleAcknowledge::default_instance_ = NULL;

SingleAcknowledge* SingleAcknowledge::New() const {
  return new SingleAcknowledge;
}

void SingleAcknowledge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = false;
    command_id_ = 0u;
    if (has_command_name()) {
      if (command_name_ != &::google::protobuf::internal::kEmptyString) {
        command_name_->clear();
      }
    }
    if (has_error_message()) {
      if (error_message_ != &::google::protobuf::internal::kEmptyString) {
        error_message_->clear();
      }
    }
  }
  parameter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleAcknowledge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_command_id;
        break;
      }
      
      // optional uint32 command_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_command_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &command_id_)));
          set_has_command_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_command_name;
        break;
      }
      
      // optional string command_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command_name().data(), this->command_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_error_message;
        break;
      }
      
      // optional string error_message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_parameter;
        break;
      }
      
      // repeated .DEMessaging.AnyParameter parameter = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_parameter;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleAcknowledge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->error(), output);
  }
  
  // optional uint32 command_id = 2;
  if (has_command_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->command_id(), output);
  }
  
  // optional string command_name = 3;
  if (has_command_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command_name().data(), this->command_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->command_name(), output);
  }
  
  // optional string error_message = 4;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->error_message(), output);
  }
  
  // repeated .DEMessaging.AnyParameter parameter = 5;
  for (int i = 0; i < this->parameter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->parameter(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleAcknowledge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->error(), target);
  }
  
  // optional uint32 command_id = 2;
  if (has_command_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->command_id(), target);
  }
  
  // optional string command_name = 3;
  if (has_command_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command_name().data(), this->command_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->command_name(), target);
  }
  
  // optional string error_message = 4;
  if (has_error_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error_message(), target);
  }
  
  // repeated .DEMessaging.AnyParameter parameter = 5;
  for (int i = 0; i < this->parameter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->parameter(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleAcknowledge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool error = 1;
    if (has_error()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 command_id = 2;
    if (has_command_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->command_id());
    }
    
    // optional string command_name = 3;
    if (has_command_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command_name());
    }
    
    // optional string error_message = 4;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }
    
  }
  // repeated .DEMessaging.AnyParameter parameter = 5;
  total_size += 1 * this->parameter_size();
  for (int i = 0; i < this->parameter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameter(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleAcknowledge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleAcknowledge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleAcknowledge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleAcknowledge::MergeFrom(const SingleAcknowledge& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameter_.MergeFrom(from.parameter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_command_id()) {
      set_command_id(from.command_id());
    }
    if (from.has_command_name()) {
      set_command_name(from.command_name());
    }
    if (from.has_error_message()) {
      set_error_message(from.error_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleAcknowledge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleAcknowledge::CopyFrom(const SingleAcknowledge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAcknowledge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < parameter_size(); i++) {
    if (!this->parameter(i).IsInitialized()) return false;
  }
  return true;
}

void SingleAcknowledge::Swap(SingleAcknowledge* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(command_id_, other->command_id_);
    std::swap(command_name_, other->command_name_);
    std::swap(error_message_, other->error_message_);
    parameter_.Swap(&other->parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleAcknowledge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleAcknowledge_descriptor_;
  metadata.reflection = SingleAcknowledge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataHeader::kBytesizeFieldNumber;
const int DataHeader::kIdentifierFieldNumber;
#endif  // !_MSC_VER

DataHeader::DataHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataHeader::InitAsDefaultInstance() {
}

DataHeader::DataHeader(const DataHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataHeader::SharedCtor() {
  _cached_size_ = 0;
  bytesize_ = GOOGLE_ULONGLONG(0);
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataHeader::~DataHeader() {
  SharedDtor();
}

void DataHeader::SharedDtor() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (this != default_instance_) {
  }
}

void DataHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataHeader_descriptor_;
}

const DataHeader& DataHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DEServer_2eproto();  return *default_instance_;
}

DataHeader* DataHeader::default_instance_ = NULL;

DataHeader* DataHeader::New() const {
  return new DataHeader;
}

void DataHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bytesize_ = GOOGLE_ULONGLONG(0);
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 bytesize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytesize_)));
          set_has_bytesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_identifier;
        break;
      }
      
      // optional string identifier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->identifier().data(), this->identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 bytesize = 1;
  if (has_bytesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->bytesize(), output);
  }
  
  // optional string identifier = 2;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->identifier(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 bytesize = 1;
  if (has_bytesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->bytesize(), target);
  }
  
  // optional string identifier = 2;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->identifier(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 bytesize = 1;
    if (has_bytesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytesize());
    }
    
    // optional string identifier = 2;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataHeader::MergeFrom(const DataHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bytesize()) {
      set_bytesize(from.bytesize());
    }
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataHeader::CopyFrom(const DataHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DataHeader::Swap(DataHeader* other) {
  if (other != this) {
    std::swap(bytesize_, other->bytesize_);
    std::swap(identifier_, other->identifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataHeader_descriptor_;
  metadata.reflection = DataHeader_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DEMessaging

// @@protoc_insertion_point(global_scope)
