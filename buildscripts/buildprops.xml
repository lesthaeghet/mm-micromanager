<project name="mm.props">
	<!-- Path of repository root, from the project basedir -->
	<dirname property="mm.basedir" file="${ant.file.mm.props}/.."/>

	<!-- Extra tasks from ant-contrib -->
	<condition property="mm.build.ant-contrib-available">
		<resourceexists>
			<file file="${mm.basedir}/lib/ant-contrib-1.0b3.jar"/>
		</resourceexists>
	</condition>
	<fail unless="mm.build.ant-contrib-available"
		message="Please run 'ant -f buildscripts/fetchdeps.xml' first"/>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${mm.basedir}/lib/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>

	<!-- Global definitions for building Micro-Manager -->

	<!-- This file should contain property, reference, and macro
	     definitions but no targets. Everything defined in this file should
	     have the "mm" prefix. -->

	<!-- Import OS environment variables -->
	<property environment="mm.env"/>

	<!-- Whether to skip nonessential components that don't build -->
	<property name="mm.build.failonerror" value="true"/>

	<!-- Whether to run (C++) builds in parallel -->
	<property name="mm.build.parallel" value="true"/>

	<!-- Verbosity setting for MSBuild (VC++); e.g. minimal or normal -->
	<property name="mm.build.msbuild.verbosity" value="minimal"/>

	<!-- Whether to use Fiji-compatible directory structure -->
	<property name="mm.build.for.imagej2updater" value="false"/>

	<!-- Logging (override with e.g. build id) -->
	<property name="mm.build.logsuffix" value=""/>

	<!-- Default build settings; can be overridden on command line -->
	<!-- TODO Provide reasonable defaults on Unix -->
	<property name="mm.platform" value="Windows"/>
	<property name="mm.configuration" value="Release"/>
	<property name="mm.architecture" value="x64"/>

	<!-- Users know about 32-bit vs 64-bit, not e.g. Win32 vs x64 -->
	<condition property="mm.architecture.bits" value="64" else="32">
		<or>
			<equals arg1="${mm.architecture}" arg2="x64"/> <!-- Windows -->
			<equals arg1="${mm.architecture}" arg2="x86_64"/> <!-- OS X, Linux -->
		</or>
	</condition>

	<!-- XXX Only Windows implemented -->
	<property name="mm.imagej2.architecture" value="win${mm.architecture.bits}"/>

	<!-- The JVM architecture on which the build is running -->
	<condition property="mm.build.architecture" value="x64" else="Win32">
		<!-- XXX Only Windows implemented -->
		<equals arg1="${os.arch}" arg2="amd64"/>
	</condition>

	<!-- Root of build intermediates directory -->
	<property name="mm.intdir" location="${mm.basedir}/build/intermediates"/>

	<!-- Root of build products directory -->
	<property name="mm.outdir" location="${mm.basedir}/build"/>

	<!-- Directories for prebuilt files -->
	<property name="mm.bindist.basedir" location="${mm.basedir}/bindist"/>
	<property name="mm.common.bindistdir" location="${mm.bindist.basedir}/any-platform"/>
	<property name="mm.platform.bindistdir" location="${mm.bindist.basedir}/any-Windows"/>
	<property name="mm.bindistdir" location="${mm.bindist.basedir}/${mm.architecture}"/>

	<!-- Root of install/stage directory -->
	<!-- Unlike the intermediates and products directory, staging can be
	     configuration/architecture-specific even for platform-independent
	     (e.g. Java) components. -->
	<property name="mm.stagedir" location="${mm.basedir}/stage"/>
	<property name="mm.installdir" location="${mm.stagedir}/${mm.configuration}/${mm.architecture}"/>

	<!-- Installers -->
	<property name="mm.distdir" location="${mm.basedir}/dist"/>

	<!-- Private symbol (debug info) archives -->
	<property name="mm.symbolsdir" location="${mm.basedir}/symbols"/>

	<!-- C++ components -->
	<property name="mm.cpp.intdir" location="${mm.intdir}/${mm.configuration}/${mm.architecture}"/>
	<property name="mm.cpp.outdir" location="${mm.outdir}/${mm.configuration}/${mm.architecture}"/>
	<if>
		<istrue value="${mm.build.for.imagej2updater}"/>
		<then>
			<property name="mm.dll.installdir" location="${mm.installdir}/mm/${mm.imagej2.architecture}"/>
		</then>
		<else>
			<property name="mm.dll.installdir" location="${mm.installdir}"/>
		</else>
	</if>
	<property name="mm.dll.helper.installdir" location="${mm.dll.installdir}"/>

	<!-- C++ DLLs matching the build system architecture -->
	<property name="mm.build.cpp.outdir" location="${mm.outdir}/${mm.configuration}/${mm.build.architecture}"/>

	<!-- Swig output -->
	<property name="mm.swig.javasrcdir" location="${mm.intdir}/Swig"/>
	<property name="mm.swig.pysrcdir" location="${mm.outdir}/Swig"/>

	<!-- Java components -->
	<property name="mm.java.intdir" location="${mm.intdir}/Classes"/>
	<property name="mm.java.outdir" location="${mm.outdir}/Java"/>
	<property name="mm.java.installdir" location="${mm.installdir}/plugins/Micro-Manager"/>

	<!-- Java plugins -->
	<property name="mm.java.plugin.srcdir" location="${mm.basedir}/plugins"/>
	<property name="mm.java.plugin.intdir" location="${mm.java.intdir}/plugins"/>
	<property name="mm.java.plugin.outdir" location="${mm.java.outdir}/plugins"/>
	<property name="mm.java.plugin.installdir" location="${mm.installdir}/mmplugins"/>
	<property name="mm.java.autofocus.intdir" location="${mm.java.intdir}/autofocus"/>
	<property name="mm.java.autofocus.outdir" location="${mm.java.outdir}/autofocus"/>
	<property name="mm.java.autofocus.installdir" location="${mm.installdir}/mmautofocus"/>

	<!-- Java library classpaths -->
	<property name="mm.java.lib.AntExtensions" location="${mm.java.outdir}/AntExtensions.jar"/>
	<property name="mm.java.lib.mmcorej" location="${mm.java.outdir}/MMCoreJ.jar"/>
	<property name="mm.java.lib.mmstudio" location="${mm.java.outdir}/MMJ_.jar"/>
	<property name="mm.java.lib.acq-engine" location="${mm.java.outdir}/MMAcqEngine.jar"/>

	<!-- Other directories -->
	<property name="mm.scripts.srcdir" location="${mm.basedir}/scripts"/>
	<property name="mm.scripts.installdir" location="${mm.installdir}/scripts"/>

	<!-- Items not in source tree but at fixed location -->
	<property name="mm.thirdpartypublic" location="${mm.basedir}/../3rdpartypublic"/>

	<!-- Third-party lib paths -->
	<include file="javalibs.xml"/>

	<!-- Packages available by default from plugins -->
	<path id="mm.java.plugin.defaultclasspath">
		<pathelement location="${mm.java.lib.commons-math}"/>
		<pathelement location="${mm.java.lib.imagej}"/>
		<pathelement location="${mm.java.lib.mmcorej}"/>
		<pathelement location="${mm.java.lib.mmstudio}"/>
	</path>

	<!-- Location of Java Runtime to package -->
	<condition property="mm.java.runtime" value="${mm.basedir}/../3rdparty/jre6_32">
		<equals arg1="${mm.architecture}" arg2="Win32"/>
	</condition>
	<condition property="mm.java.runtime" value="${mm.basedir}/../3rdparty/jre">
		<equals arg1="${mm.architecture}" arg2="x64"/>
	</condition>

	<!-- Build a Visual Studio project or solution -->
	<!-- We generate separate logs because it is hard to parse MSBuild
	     output out of the Ant log -->
	<macrodef name="mm-msbuild">
		<attribute name="project"/> <!-- Can also be a solution file -->
		<attribute name="target" default="Build"/>
		<attribute name="logdir" default="${mm.cpp.outdir}"/>
		<attribute name="logbasename" default="msbuild"/>
		<attribute name="parallel" default="${mm.build.parallel}"/>
		<attribute name="verbosity" default="${mm.build.msbuild.verbosity}"/>
		<attribute name="failonerror" default="true"/>
		<sequential>
			<!-- MSBuild will fail if log dir does not exist -->
			<mkdir dir="@{logdir}"/>
			<local name="msbuild.log"/>
			<property name="msbuild.log" location="@{logdir}/@{logbasename}.log"/>

			<local name="msbuild.flag.parallel"/>
			<condition property="msbuild.flag.parallel" value="/m" else="">
				<istrue value="@{parallel}"/>
			</condition>

			<local name="msbuild.params"/>
			<property name="msbuild.params"
				value="@{project} /t:@{target} /p:Configuration=${mm.configuration} /p:Platform=${mm.architecture} /v:@{verbosity} /flp:LogFile=${msbuild.log} ${msbuild.flag.parallel}"/>

			<local name="vs.commontools.dir"/>
			<property name="vs.commontools.dir" location="${mm.env.VS100COMNTOOLS}"/>
			<local name="vsvars32"/>
			<property name="vsvars32" location="${vs.commontools.dir}/vsvars32.bat"/>
			<fail message="Cannot locate vsvars32.bat for Visual Studio 2010">
				<condition> <not> <available file="${vsvars32}"/> </not> </condition>
			</fail>

			<local name="temp.bat"/>
			<tempfile property="temp.bat" prefix="msbuild" suffix=".bat" destdir="${mm.intdir}"/>
			<echo file="${temp.bat}">@echo off
				call "${vsvars32}"
				if errorlevel 1 exit /b
				msbuild ${msbuild.params}
			</echo>
			<exec executable="cmd" failonerror="@{failonerror}">
				<arg value="/c"/>
				<arg value="${temp.bat}"/>
			</exec>
			<delete file="${temp.bat}"/>
		</sequential>
	</macrodef>

	<!-- Compiling Java -->
	<presetdef name="mm-ant-javac">
		<javac debug="on" debuglevel="lines,vars,source"
			optimize="on" deprecation="on"
			source="1.5" target="1.5" includeAntRuntime="true">
			<compilerarg value="-Xlint"/>
		</javac>
	</presetdef>
	<presetdef name="mm-javac">
		<javac debug="on" debuglevel="lines,vars,source"
			optimize="on" deprecation="on"
			source="1.5" target="1.5" includeAntRuntime="false">
			<compilerarg value="-Xlint:all,-serial"/>
		</javac>
	</presetdef>

	<presetdef name="mm-jar">
		<jar compress="true" index="true" indexMetaInf="true"/>
	</presetdef>

	<macrodef name="mm-cljc">
		<attribute name="namespace"/>
		<attribute name="srcdir"/>
		<attribute name="destdir"/>
		<element name="clj-classpath" optional="false"/>
		<sequential>
			<java classname="clojure.lang.Compile" fork="true" failonerror="true">
				<arg value="@{namespace}"/>
				<sysproperty key="clojure.compile.path" value="@{destdir}"/>
				<sysproperty key="java.library.path" value="${mm.build.cpp.outdir}"/>
				<classpath>
					<pathelement location="@{destdir}"/>
					<pathelement location="@{srcdir}"/>
					<pathelement location="${mm.java.lib.clojure}"/>
					<clj-classpath/>
				</classpath>
			</java>
		</sequential>
	</macrodef>

	<!-- Compile a Java class for a Clojure project, but do not AOT compile
	     the Clojure source -->
	<macrodef name="mm-clj-genclass">
		<attribute name="namespace"/>
		<attribute name="genclass"/>
		<attribute name="srcdir"/>
		<attribute name="destdir"/>
		<element name="cljc-elements" implicit="true"/>
		<sequential>
			<!-- Convert "com.example.package.Class" to
			     "com/example/package/Class" -->
			<property name="genclass.classname" value="@{genclass}"/>
			<loadresource property="genclass.path">
				<propertyresource name="genclass.classname"/>
				<filterchain>
					<tokenfilter>
						<filetokenizer/>
						<replacestring from="." to="/"/>
					</tokenfilter>
				</filterchain>
			</loadresource>

			<tempfile property="genclass.tmpdir" destdir="${mm.intdir}" prefix="cljc"/>
			<mkdir dir="${genclass.tmpdir}"/>

			<mm-cljc namespace="@{namespace}" srcdir="@{srcdir}"
				destdir="${genclass.tmpdir}">
				<cljc-elements/>
			</mm-cljc>

			<!-- Copy the compiled Java class only -->
			<copy tofile="@{destdir}/${genclass.path}.class"
				file="${genclass.tmpdir}/${genclass.path}.class"/>

			<!-- Copy Clojure source files -->
			<copy todir="@{destdir}">
				<fileset dir="@{srcdir}" includes="**/*.clj"/>
			</copy>

			<delete dir="${genclass.tmpdir}"/>
		</sequential>
	</macrodef>
</project>
