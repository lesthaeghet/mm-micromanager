/*
 * Copyright 2014, Andor Technology, Inc.
 * Contributed as open source to the Micro-Manager
 * code base.
 * Code written by Arthur Edelstein.
 * 
 */

package org.micromanager.projector;

import ij.gui.ImageWindow;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;
import javax.swing.JComboBox;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import mmcorej.CMMCore;
import mmcorej.DeviceType;
import mmcorej.StrVector;
import org.micromanager.MMStudioMainFrame;
import org.micromanager.utils.GUIUtils;
import org.micromanager.utils.ReportingUtils;

/**
 * This code is partly generated by the Netbeans Form Editor,
 * and those parts should not be edited by hand.
 */
public class MosaicSequencingFrame extends javax.swing.JFrame {
   private final CMMCore core_;
   private final MMStudioMainFrame gui_;
   private final String mosaic_;
   private final Map settings = new ConcurrentHashMap();
   private DefaultTableModel sequenceTableModel_;
   
   final Map<String, String> triggerProperties_ = new HashMap<String, String>() {{
         put("External Frame Bulb", "ExternalBulb");
         put("Sequence Start", "InternalExpose");
         put("External Advance", "ExternalExpose");
         put("External Start", "ExternalSequenceStart");
      }};

   // Returns all active Mosaic devices reported by the MMCore.
   private static ArrayList<String> getMosaicDevices(CMMCore core) {
      StrVector slmDevices = core.getLoadedDevicesOfType(DeviceType.SLMDevice);
      final ArrayList<String> mosaicDevices = new ArrayList<String>();
      for (final String slmDevice : slmDevices) {
         try {
            if (core.getDeviceLibrary(slmDevice).contentEquals("Mosaic3"))
               mosaicDevices.add(slmDevice);
         } catch (Exception ex) {
            ReportingUtils.logError(ex);
         }
      }
      return mosaicDevices;
   }
   
   // Alter the Time Slot indices such that the first row is
   // column 1, the second column 2, and so on.
   private void updateTimeSlotIndices() {
      for (int i = 0; i < sequenceTableModel_.getRowCount(); ++i) {
         sequenceTableModel_.setValueAt(i + 1, i, 0);
      }
   }
   
   // Ensures that the "Time Slot" column such that the first
   // row is column 1, the second is 2, and so on.
   private void keepTimeSlotIndicesUpToDate() {
      sequenceTableModel_.addTableModelListener(new TableModelListener() {
         @Override
         public void tableChanged(TableModelEvent e) {
            sequenceTableModel_.removeTableModelListener(this);
            updateTimeSlotIndices();
            sequenceTableModel_.addTableModelListener(this);
         }
      });
   }
   
   // Adds a row to the sequence table, including ROIs, an
   // on-duration period, an off-duration period, and a loop 
   // repeat count. Returns the index of the added row.
   private int addRow(String roiIndicesString, int onDurationMs, int offDurationMs, int loopCount) {
      Vector<String> rowVector = new Vector<String>();
      rowVector.add("");
      rowVector.add(roiIndicesString);
      rowVector.add(String.valueOf(onDurationMs).trim());
      rowVector.add(String.valueOf(offDurationMs).trim());
      rowVector.add(String.valueOf(loopCount).trim());
      sequenceTableModel_.addRow(rowVector);
      return sequenceTableModel_.getRowCount() - 1;
   }
   
   private void addTimeSlot() {
      int row = addRow("",
            GUIUtils.getIntValue(onDurationTextField),
            GUIUtils.getIntValue(offDurationTextField),
            GUIUtils.getIntValue(onDurationTextField));
      sequenceTable.setRowSelectionInterval(row, row);
      sequenceTable.editCellAt(row, 1);
      sequenceTable.getEditorComponent().requestFocusInWindow();
   }
   
   // Generate a new sequence of phototargeting events.
   private void generateNewSequence(int roiCount) {
      int onDurationMs = GUIUtils.getIntValue(onDurationTextField);
      int offDurationMs = GUIUtils.getIntValue(offDurationTextField);
      int loopCount = GUIUtils.getIntValue(loopCountTextField);
      String sequenceType = (String) sequenceTypeComboBox.getSelectedItem();
      sequenceTable.clearSelection();
      sequenceTableModel_.getDataVector().clear();
      if (sequenceType.contentEquals("Simultaneous")) {
         addRow("1-" + String.valueOf(roiCount).trim(), onDurationMs, offDurationMs, loopCount);
      }
      if (sequenceType.contentEquals("Sequential")) {
         for (int i = 0; i < roiCount; ++i) {
            addRow(String.valueOf(i + 1).trim(), onDurationMs, offDurationMs, loopCount);      
         }
      }
      if (sequenceType.contentEquals("Cumulative")) {
         for (int i = 0; i < roiCount; ++i) {
            addRow(i == 0 ? "1" : "1-" + String.valueOf(i + 1).trim(), onDurationMs, offDurationMs, loopCount);      
         }
      }
      updateTimeSlotIndices();
   }
   
   private int getRoiCount() {
      final ImageWindow win = gui_.getSnapLiveWin();
      if (win == null) {
         return 0;
      }
      return ProjectorController.getRois(gui_.getSnapLiveWin()).length;
   }
   
   /**
    * Creates new form MosaicSequencingFrame
    */
   public MosaicSequencingFrame(MMStudioMainFrame gui, CMMCore core) {
      initComponents();
      gui_ = gui;
      core_ = core;
      // Get the first available Mosaic device for now.
      mosaic_ = getMosaicDevices(core).get(0);
      sequenceTableModel_ = (DefaultTableModel) sequenceTable.getModel();
      
      GUIUtils.setClickCountToStartEditing(sequenceTable, 1);
      GUIUtils.stopEditingOnLosingFocus(sequenceTable);
      
      GUIUtils.makeIntoMoveRowUpButton(sequenceTable, upButton);
      GUIUtils.makeIntoMoveRowDownButton(sequenceTable, downButton);
      GUIUtils.makeIntoCloneRowButton(sequenceTable, cloneButton);
      GUIUtils.makeIntoDeleteRowButton(sequenceTable, deleteButton);
      
      keepTimeSlotIndicesUpToDate();
      
      GUIUtils.recallPosition(this);
      GUIUtils.enforceIntegerTextField(this.loopCountTextField, 0, 65535);
      GUIUtils.enforceIntegerTextField(this.offDurationTextField, 0, 200000);
      GUIUtils.enforceIntegerTextField(this.onDurationTextField, 0, 200000);
      GUIUtils.enforceIntegerTextField(this.sequenceCountTextField, 0, 65535);
      
      addTimeSlotButton.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
            addTimeSlot();
         }
         
      });
   }

   // Warning: code below this line should not be edited by hand.
   // Instead, use the Netbeans Form Editor to make changes.
   
   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jPanel1 = new javax.swing.JPanel();
      jLabel2 = new javax.swing.JLabel();
      jLabel3 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      onDurationTextField = new javax.swing.JTextField();
      offDurationTextField = new javax.swing.JTextField();
      loopCountTextField = new javax.swing.JTextField();
      sequenceTypeComboBox = new javax.swing.JComboBox();
      generateSequenceButton = new javax.swing.JButton();
      jLabel1 = new javax.swing.JLabel();
      jPanel2 = new javax.swing.JPanel();
      jScrollPane2 = new javax.swing.JScrollPane();
      sequenceTable = new javax.swing.JTable();
      jButton7 = new javax.swing.JButton();
      downButton = new javax.swing.JButton();
      cloneButton = new javax.swing.JButton();
      addTimeSlotButton = new javax.swing.JButton();
      upButton = new javax.swing.JButton();
      deleteButton = new javax.swing.JButton();
      jPanel3 = new javax.swing.JPanel();
      jButton8 = new javax.swing.JButton();
      jLabel6 = new javax.swing.JLabel();
      sequenceCountTextField = new javax.swing.JTextField();
      jLabel7 = new javax.swing.JLabel();
      sequenceTriggerComboBox = new javax.swing.JComboBox();
      jButton9 = new javax.swing.JButton();
      jButton10 = new javax.swing.JButton();

      setTitle("Andor Mosaic Sequencing");
      setResizable(false);

      jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "New Sequence", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(0, 0, 0))); // NOI18N

      jLabel2.setText("On Duration (ms)");

      jLabel3.setText("Off Duration (ms)");

      jLabel4.setText("Loop Count");

      onDurationTextField.setText("0");

      offDurationTextField.setText("0");

      loopCountTextField.setText("0");

      sequenceTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sequential", "Cumulative", "Simultaneous" }));

      generateSequenceButton.setText("Generate Sequence");
      generateSequenceButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            generateSequenceButtonActionPerformed(evt);
         }
      });

      jLabel1.setText("Sequence type:");

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(35, 35, 35)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                     .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                     .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                     .addComponent(loopCountTextField, javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(offDurationTextField, javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(onDurationTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(jLabel1)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(sequenceTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                  .addComponent(generateSequenceButton)
                  .addGap(10, 10, 10)))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(sequenceTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel1))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel2)
               .addComponent(onDurationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel3)
               .addComponent(offDurationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel4)
               .addComponent(loopCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(generateSequenceButton)
            .addContainerGap(12, Short.MAX_VALUE))
      );

      jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Sequence", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(0, 0, 0))); // NOI18N
      jPanel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

      sequenceTable.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {

         },
         new String [] {
            "Time Slot", "FRAP Regions", "On Duration (ms)", "Off Duration (ms)", "Loops"
         }
      ) {
         boolean[] canEdit = new boolean [] {
            false, true, true, true, false
         };

         public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
         }
      });
      sequenceTable.getTableHeader().setResizingAllowed(false);
      sequenceTable.getTableHeader().setReorderingAllowed(false);
      jScrollPane2.setViewportView(sequenceTable);
      if (sequenceTable.getColumnModel().getColumnCount() > 0) {
         sequenceTable.getColumnModel().getColumn(0).setResizable(false);
         sequenceTable.getColumnModel().getColumn(0).setPreferredWidth(40);
         sequenceTable.getColumnModel().getColumn(4).setPreferredWidth(50);
      }

      jButton7.setText("Customize");

      downButton.setText("Down");

      cloneButton.setText("Clone");

      addTimeSlotButton.setText("Add time slot");
      addTimeSlotButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            addTimeSlotButtonActionPerformed(evt);
         }
      });

      upButton.setText("Up");

      deleteButton.setText("Delete");

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                  .addComponent(addTimeSlotButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(cloneButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(deleteButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(upButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(downButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(jButton7))
               .addComponent(jScrollPane2))
            .addContainerGap())
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(addTimeSlotButton)
               .addComponent(cloneButton)
               .addComponent(deleteButton)
               .addComponent(upButton)
               .addComponent(downButton)
               .addComponent(jButton7))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder()));

      jButton8.setText("Upload");

      jLabel6.setText("Sequence Count:");

      sequenceCountTextField.setText("0");

      jLabel7.setText("Trigger:");

      sequenceTriggerComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sequence Start", "External Start", "External Advance", "External Frame Bulb" }));
      sequenceTriggerComboBox.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            sequenceTriggerComboBoxActionPerformed(evt);
         }
      });

      jButton9.setText("Run");

      jButton10.setText("Stop");

      javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jButton8)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jLabel6)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(sequenceCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jLabel7)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(sequenceTriggerComboBox, 0, 147, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButton9)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jButton10)
            .addContainerGap())
      );
      jPanel3Layout.setVerticalGroup(
         jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButton8)
               .addComponent(jLabel6)
               .addComponent(sequenceCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel7)
               .addComponent(sequenceTriggerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton9)
               .addComponent(jButton10))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   private void sequenceTriggerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sequenceTriggerComboBoxActionPerformed
      try {
         String currentValue = ((JComboBox) sequenceTriggerComboBox).getSelectedItem().toString();
         settings.put("TriggerMode", currentValue);
      } catch (Exception ex) {
         ReportingUtils.logError(ex);
      }
            
   }//GEN-LAST:event_sequenceTriggerComboBoxActionPerformed

   private void generateSequenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateSequenceButtonActionPerformed
      generateNewSequence(getRoiCount());
   }//GEN-LAST:event_generateSequenceButtonActionPerformed

   private void addTimeSlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTimeSlotButtonActionPerformed
   }//GEN-LAST:event_addTimeSlotButtonActionPerformed


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton addTimeSlotButton;
   private javax.swing.JButton cloneButton;
   private javax.swing.JButton deleteButton;
   private javax.swing.JButton downButton;
   private javax.swing.JButton generateSequenceButton;
   private javax.swing.JButton jButton10;
   private javax.swing.JButton jButton7;
   private javax.swing.JButton jButton8;
   private javax.swing.JButton jButton9;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JPanel jPanel3;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JTextField loopCountTextField;
   private javax.swing.JTextField offDurationTextField;
   private javax.swing.JTextField onDurationTextField;
   private javax.swing.JTextField sequenceCountTextField;
   private javax.swing.JTable sequenceTable;
   private javax.swing.JComboBox sequenceTriggerComboBox;
   private javax.swing.JComboBox sequenceTypeComboBox;
   private javax.swing.JButton upButton;
   // End of variables declaration//GEN-END:variables
}
