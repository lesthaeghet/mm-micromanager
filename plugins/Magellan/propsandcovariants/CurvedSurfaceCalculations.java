///////////////////////////////////////////////////////////////////////////////
// AUTHOR:       Henry Pinkard, henry.pinkard@gmail.com
//
// COPYRIGHT:    University of California, San Francisco, 2015
//
// LICENSE:      This file is distributed under the BSD license.
//               License text is included with the source distribution.
//
//               This file is distributed in the hope that it will be useful,
//               but WITHOUT ANY WARRANTY; without even the implied warranty
//               of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//
//               IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//               CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//               INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES.
//
package propsandcovariants;

import java.util.ArrayList;
import java.util.Arrays;
import misc.Log;

/**
 *
 * wrapper class that holds precalculated values of relative power based on
 * vertical distance, surface normal value, and radius of curvature
 */
public class CurvedSurfaceCalculations {

   //mean free paths for which vals have been calculated
   private static Integer[] MEAN_FREE_PATHS = new Integer[]{30, 90, 200};
   private static Integer[] RADII_OF_CURVATURE = new Integer[]{600, 800};
   //ponts at which relative power has been calculated
   private static int DISTANCE_INCREMENT = 20;
   private static int NORMAL_INCREMENT = 10;
   //[radius of curvature][mean free path][normal][vertical distance]
   private static final double[][][][] RELATIVE_POWERS = new double[][][][]{   
      //radius = 600
      {
         //MFP 30
         {{1.000000, 1.956162, 3.062142, 4.216545, 5.374378, 6.517948, 7.640522, 8.739686, 9.814809, 10.866024, 11.893796, 12.898725, 13.881446, 14.842592, 15.782769, 15.782769},
            {1.000000, 1.950023, 3.110374, 4.357412, 5.619179, 6.863916, 8.080026, 9.264360, 10.416978, 11.539048, 12.632028, 13.697370, 14.736418, 15.750369, 16.740292, 16.740292},
            {1.000000, 1.966496, 3.180014, 4.513880, 5.876458, 7.221048, 8.529177, 9.795824, 11.021389, 12.208105, 13.358597, 14.475363, 15.560622, 16.616293, 17.644024, 17.644024},
            {1.001054, 2.016392, 3.275711, 4.679904, 6.128983, 7.563390, 8.956015, 10.297996, 11.588862, 12.831369, 14.029150, 15.185780, 16.304454, 17.387918, 18.438499, 18.438499},
            {1.041797, 2.102914, 3.382635, 4.820075, 6.319745, 7.815051, 9.270060, 10.669686, 12.010258, 13.293417, 14.522834, 15.702640, 16.836755, 17.928647, 18.981287, 18.981287},
            {1.129420, 2.205711, 3.453737, 4.854501, 6.330998, 7.820231, 9.281358, 10.692266, 12.043373, 13.332343, 14.560530, 14.600000, 14.800000, 15.000000, 16.000000, 16.000000},
            {1.282357, 2.201728, 3.200110, 4.279121, 5.381698, 6.458291, 7.473654, 8.404912, 9.237535, 9.961323, 10.560946, 12.800000, 12.000000, 13.000000, 14.000000, 14.000000},
            {1.435294, 2.197745, 2.946482, 3.703740, 4.432399, 5.096350, 5.665950, 6.117558, 6.431698, 6.590303, 6.561362, 10.429641, 10.766784, 10.940900, 11.000000, 11.000000},
            {1.588231, 2.193761, 2.692854, 3.128359, 3.483099, 3.734409, 3.858246, 3.830204, 3.625860, 3.219283, 2.561777, 2.446063, 2.812709, 2.964646, 2.929796, 2.929796}},
         //MFP 90
         {{1.000000, 1.288286, 1.596022, 1.917581, 2.248076, 2.583494, 2.920679, 3.257234, 3.591394, 3.921893, 4.247850, 4.568672, 4.883973, 5.193521, 5.497186, 5.497186},
            {1.000000, 1.279781, 1.584052, 1.907682, 2.245574, 2.593059, 2.946107, 3.301400, 3.656308, 4.008818, 4.357440, 4.701105, 5.039074, 5.370863, 5.696172, 5.696172},
            {1.000000, 1.280337, 1.584774, 1.910662, 2.253768, 2.609614, 2.973957, 3.343030, 3.713645, 4.083216, 4.449715, 4.811608, 5.167777, 5.517436, 5.860064, 5.860064},
            {1.000391, 1.294774, 1.601857, 1.929096, 2.274046, 2.633004, 3.002048, 3.377422, 3.755769, 4.134217, 4.510402, 4.882443, 5.248897, 5.608691, 5.961061, 5.961061},
            {1.021647, 1.330817, 1.638549, 1.962862, 2.303119, 2.656584, 3.019946, 3.389838, 3.763100, 4.136912, 4.508850, 4.876900, 5.239438, 5.595186, 5.943166, 5.943166},
            {1.075882, 1.390637, 1.692120, 2.004541, 2.328665, 2.662677, 3.004004, 3.349881, 3.697612, 4.044703, 4.388921, 4.728322, 5.061243, 5.386277, 5.702240, 5.702240},
            {1.162047, 1.469396, 1.751611, 2.036511, 2.325841, 2.618510, 2.912571, 3.205796, 3.495909, 3.780686, 4.058005, 4.325845, 4.582277, 4.825421, 5.053405, 5.053405},
            {1.279375, 1.555931, 1.796142, 2.027862, 2.253083, 2.470870, 2.679328, 2.876123, 3.058659, 3.224122, 3.369462, 3.491329, 3.585976, 3.649114, 3.675717, 3.675717},
            {1.428078, 1.630085, 1.788115, 1.922932, 2.034927, 2.121671, 2.179338, 2.202806, 2.185072, 2.115186, 1.967917, 1.928475, 2.036901, 2.112577, 2.150098, 2.150098}
         },
         null
     },
      //radius = 800
      {
         null,
         null,
         //MFP 200
         {{1.000000, 1.126053, 1.255071, 1.386674, 1.520457, 1.656015, 1.792959, 1.930919, 2.069548, 2.208531, 2.347578, 2.486430, 2.624856, 2.762649, 2.899630, 3.035639, 3.170540, 3.304214, 3.436560, 3.567491, 3.696933, 3.824825, 3.951115, 4.075759, 4.198723, 4.319976, 4.439495, 4.557260, 4.673255, 4.787468, 4.899887, 5.010505, 5.119313, 5.226306, 5.331477, 5.434820, 5.536330, 5.636001, 5.733825, 5.829795, 5.923904, 5.923904},
            {1.000000, 1.121669, 1.247169, 1.376180, 1.508323, 1.643193, 1.780379, 1.919475, 2.060089, 2.201847, 2.344401, 2.487424, 2.630618, 2.773710, 2.916453, 3.058624, 3.200028, 3.340489, 3.479852, 3.617984, 3.754767, 3.890100, 4.023896, 4.156081, 4.286593, 4.415378, 4.542391, 4.667597, 4.790964, 4.912466, 5.032084, 5.149800, 5.265600, 5.379473, 5.491408, 5.601397, 5.709433, 5.815508, 5.919616, 6.021748, 6.121898, 6.121898},
            {1.000000, 1.121797, 1.246407, 1.374317, 1.505469, 1.639630, 1.776486, 1.915692, 2.056885, 2.199703, 2.343792, 2.488810, 2.634432, 2.780355, 2.926296, 3.071994, 3.217212, 3.361732, 3.505361, 3.647923, 3.789265, 3.929248, 4.067752, 4.204672, 4.339915, 4.473401, 4.605062, 4.734839, 4.862681, 4.988545, 5.112393, 5.234195, 5.353924, 5.471554, 5.587066, 5.700442, 5.811664, 5.920716, 6.027584, 6.132250, 6.234699, 6.234699},
            {1.000240, 1.129614, 1.255469, 1.383179, 1.513477, 1.646467, 1.782022, 1.919909, 2.059846, 2.201522, 2.344617, 2.488810, 2.633786, 2.779241, 2.924887, 3.070449, 3.215673, 3.360322, 3.504178, 3.647041, 3.788730, 3.929079, 4.067940, 4.205180, 4.340680, 4.474331, 4.606040, 4.735721, 4.863297, 4.988700, 5.111869, 5.232748, 5.351284, 5.467429, 5.581138, 5.692367, 5.801072, 5.907209, 6.010733, 6.111596, 6.209749, 6.209749},
            {1.014549, 1.152078, 1.278844, 1.405596, 1.533865, 1.664081, 1.796301, 1.930411, 2.066212, 2.203457, 2.341876, 2.481184, 2.621095, 2.761325, 2.901597, 3.041644, 3.181213, 3.320060, 3.457959, 3.594696, 3.730071, 3.863899, 3.996005, 4.126227, 4.254416, 4.380430, 4.504135, 4.625406, 4.744123, 4.860169, 4.973431, 5.083796, 5.191150, 5.295377, 5.396357, 5.493961, 5.588054, 5.678487, 5.765097, 5.847702, 5.926098, 5.926098},
            {1.053485, 1.193709, 1.318752, 1.441976, 1.565386, 1.689625, 1.814871, 1.941096, 2.068166, 2.195882, 2.324014, 2.452310, 2.580507, 2.708339, 2.835541, 2.961848, 3.087002, 3.210750, 3.332845, 3.453044, 3.571111, 3.686815, 3.799927, 3.910218, 4.017459, 4.121420, 4.221862, 4.318540, 4.411194, 4.499550, 4.583309, 4.662147, 4.735706, 4.803583, 4.865325, 4.920410, 4.968236, 5.008099, 5.039168, 5.060448, 5.070735, 5.070735},
            {1.117843, 1.254780, 1.373555, 1.488589, 1.602105, 1.714841, 1.827033, 1.938684, 2.049677, 2.159823, 2.268892, 2.376620, 2.482728, 2.586917, 2.688880, 2.788296, 2.884832, 2.978146, 3.067879, 3.153654, 3.235075, 3.311716, 3.383122, 3.448795, 3.508186, 3.560689, 3.605614, 3.642183, 3.669496, 3.686503, 3.691967, 3.684404, 3.662009, 3.622544, 3.563171, 3.480179, 3.368503, 3.220762, 3.024945, 2.756552, 2.292762, 2.292762},
            {1.208915, 1.332958, 1.437445, 1.536059, 1.630922, 1.722711, 1.811595, 1.897505, 1.980240, 2.059508, 2.134955, 2.206172, 2.272701, 2.334031, 2.389596, 2.438766, 2.480834, 2.515001, 2.540353, 2.555827, 2.560168, 2.551857, 2.529003, 2.489155, 2.428943, 2.343257, 2.222875, 2.042219, 1.972692, 2.006406, 2.012062, 1.995639, 1.962549, 1.918134, 1.867426, 1.814896, 1.764312, 1.718826, 1.681284, 1.656083, 1.644940, 1.644940},
            {1.328509, 1.421851, 1.496882, 1.563513, 1.623121, 1.675906, 1.721593, 1.759623, 1.789193, 1.809236, 1.818325, 1.814460, 1.794520, 1.752370, 1.680375, 1.731156, 1.774923, 1.811097, 1.838344, 1.855501, 1.862010, 1.857936, 1.844031, 1.821621, 1.792468, 1.758600, 1.722133, 1.685149, 1.649607, 1.617336, 1.590152, 1.570474, 1.563019, 1.557220, 1.551328, 1.545349, 1.539287, 1.533150, 1.526938, 1.520659, 1.514314, 1.514314},
            {1.480502, 1.507088, 1.537568, 1.571191, 1.607012, 1.643904, 1.680568, 1.715567, 1.747389, 1.774493, 1.795518, 1.809264, 1.815030, 1.812567, 1.802128, 1.784446, 1.760662, 1.732208, 1.700696, 1.667803, 1.635182, 1.604442, 1.577082, 1.554800, 1.540454, 1.536065, 1.531552, 1.526869, 1.522028, 1.517040, 1.511916, 1.506668, 1.501300, 1.495823, 1.490243, 1.484566, 1.478799, 1.472944, 1.467008, 1.460996, 1.454909, 1.454909}
         }
      }
   };


   public static double getRelativePower(int meanFreePath, double vertDistance, double normal, int radiusOfCurvature) {
       int mfpIndex = Arrays.asList(MEAN_FREE_PATHS).indexOf(meanFreePath);
      int radiusIndex = Arrays.asList(RADII_OF_CURVATURE).indexOf(radiusOfCurvature);
      if (mfpIndex == -1) {
         Log.log("Couldn't find mean free path in precalculated values");
         throw new RuntimeException();
      }
      if (radiusIndex == -1) {
         Log.log("Couldn't find radius of curvature in precalculated values");
         throw new RuntimeException();
      }
      double indexedDistance = vertDistance / DISTANCE_INCREMENT;
      int normalIndex = (int) Math.round(normal / NORMAL_INCREMENT); //this one should never exceed 90 degrees so we can round
      double[] distanceVec = RELATIVE_POWERS[radiusIndex][mfpIndex][normalIndex];
      if (indexedDistance > distanceVec.length - 1) {
         return distanceVec[distanceVec.length - 1];
      } else {
         double weight = indexedDistance % 1;
         return (1 - weight) * distanceVec[(int) Math.floor(indexedDistance)] + weight * distanceVec[(int) Math.ceil(indexedDistance)];
      }
   }

   public static String[] getAvailableMeanFreePathLengths(int radius) {
      ArrayList<String> mfps = new ArrayList<String>();
      for (int radiusIndex = 0; radiusIndex < RADII_OF_CURVATURE.length; radiusIndex++) {
         if (radius == RADII_OF_CURVATURE[radiusIndex]) {
            for (int mfpIndex = 0; mfpIndex < MEAN_FREE_PATHS.length; mfpIndex++) {
               if (RELATIVE_POWERS[radiusIndex][mfpIndex] != null) {
                  mfps.add(MEAN_FREE_PATHS[mfpIndex] + "");
               }
            }
            String[] arr = new String[mfps.size()];            
            return mfps.toArray(arr);
         }
      }
      throw new RuntimeException("Radius of curvature not found");
   }

   public static String[] getAvailableRadiiOfCurvature() {
      String[] vals = new String[RADII_OF_CURVATURE.length];
      for (int i = 0; i < vals.length; i++) {
         vals[i] = RADII_OF_CURVATURE[i] + "";
      }
      return vals;
   }
}
