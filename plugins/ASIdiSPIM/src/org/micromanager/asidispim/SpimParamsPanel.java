///////////////////////////////////////////////////////////////////////////////
//FILE:          SpimParamsPanel.java
//PROJECT:       Micro-Manager 
//SUBSYSTEM:     ASIdiSPIM plugin
//-----------------------------------------------------------------------------
//
// AUTHOR:       Nico Stuurman, Jon Daniels
//
// COPYRIGHT:    University of California, San Francisco, & ASI, 2013
//
// LICENSE:      This file is distributed under the BSD license.
//               License text is included with the source distribution.
//
//               This file is distributed in the hope that it will be useful,
//               but WITHOUT ANY WARRANTY; without even the implied warranty
//               of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//
//               IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//               CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//               INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES.

package org.micromanager.asidispim;

import org.micromanager.asidispim.Data.SpimParams;
import org.micromanager.asidispim.Data.Devices;
import org.micromanager.asidispim.Utils.ListeningJPanel;
import org.micromanager.asidispim.Utils.SpimParamsListenerInterface;
import org.micromanager.utils.ReportingUtils;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;

import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import net.miginfocom.swing.MigLayout;

/**
 *
 * @author nico
 * @author Jon
 */
public class SpimParamsPanel extends ListeningJPanel {

   SpimParams params_;
   Devices devices_;

   public SpimParamsPanel(SpimParams params, Devices devices) {
      super(new MigLayout(
              "",
              "[right]16[center]16[center]",
              "[]12[]"));
      params_ = params;
      devices_ = devices;
      
      try {

    	  add(new JLabel("Number of sides:"), "split 2");
    	  add(makeSpinnerInteger(SpimParams.NR_SIDES, 1, 2));

    	  add(new JLabel("First side:"), "align right");
    	  add(makeABBox(SpimParams.FIRSTSIDE), "wrap");

    	  add(new JLabel("Side A"), "cell 1 2");
    	  add(new JLabel("Side B"), "wrap");

    	  add(new JLabel("Number of slices:"));
    	  add(makeSpinnerInteger(SpimParams.NR_SLICES, 1, 99), "span 2, wrap");

    	  add(new JLabel("Lines scans per slice:"));
    	  add(makeSpinnerInteger(SpimParams.NR_LINESCANS_PER_SLICE, 1, 1000), "span 2, wrap");

    	  add(new JLabel("Line scan period (ms):"));
    	  add(makeSpinnerInteger(SpimParams.LINE_SCAN_PERIOD_A, 1, 10000));
    	  add(makeSpinnerInteger(SpimParams.LINE_SCAN_PERIOD_B, 1, 10000), "wrap");

    	  add(new JLabel("Delay before each slice (ms):"));
//    	  add(makeSpinnerFloat(SpimParams.DELAY_BEFORE_SLICE_A, 0.0, 10000.0, 0.25));
//    	  add(makeSpinnerFloat(SpimParams.DELAY_BEFORE_SLICE_B, 0.0, 10000.0, 0.25), "wrap");
    	  add(makeSpinnerInteger(SpimParams.DELAY_BEFORE_SLICE_A, 0, 10000));
    	  add(makeSpinnerInteger(SpimParams.DELAY_BEFORE_SLICE_B, 0, 10000), "wrap");

    	  add(new JLabel("Delay before each side (ms):"));
//    	  add(makeSpinnerFloat(SpimParams.DELAY_BEFORE_SIDE_A, 0.0, 10000.0, 0.25));
//    	  add(makeSpinnerFloat(SpimParams.DELAY_BEFORE_SIDE_B, 0.0, 10000.0, 0.25), "wrap");
    	  add(makeSpinnerInteger(SpimParams.DELAY_BEFORE_SIDE_A, 0, 10000));
    	  add(makeSpinnerInteger(SpimParams.DELAY_BEFORE_SIDE_B, 0, 10000), "wrap");
    	  
      } catch (Exception ex) {
    	  ReportingUtils.showError("Error creating spinners, probably a type mismatch");
      }
      
   }

   
   /**
    * Listener for Spinners in the GUI
    * Updates the Spim Params model with any GUI changes
    * Also implements SpimParamsListenerInterface, causing updates in the model
    * that were generated by changes in the device to be propagated back to the UI
    */
   class IntSpinnerListener implements ChangeListener, SpimParamsListenerInterface {
      String spimParamName_;
      JSpinner sp_;

      public IntSpinnerListener(String spimParamName, JSpinner sp) {
         spimParamName_ = spimParamName;
         sp_ = sp;
      }

      public void stateChanged(ChangeEvent ce) {
         params_.putIntInfo(spimParamName_, (Integer) sp_.getValue());
      }

      public void spimParamsChangedAlert() {
         sp_.setValue(params_.getIntInfo(spimParamName_));
      }
   };
   
   private JSpinner makeSpinnerInteger(String spimParamName, int min, int max) throws ParseException {
	   SpinnerModel jspm = new SpinnerNumberModel(params_.getPropValueInteger(spimParamName), min, max, 1);
	   JSpinner jsp = new JSpinner(jspm);
	   IntSpinnerListener ispl = new IntSpinnerListener(spimParamName, jsp);
	   jsp.addChangeListener(ispl);
	   params_.addListener(ispl);		   
	   return jsp;
   }
   
   private JSpinner makeSpinnerFloat(String spimParamName, double min, double max, double step) throws ParseException {
	   SpinnerModel jspm = new SpinnerNumberModel((double)params_.getPropValueFloat(spimParamName), min, max, step);
	   JSpinner jsp = new JSpinner(jspm);
	   IntSpinnerListener ispl = new IntSpinnerListener(spimParamName, jsp);
	   jsp.addChangeListener(ispl);
	   params_.addListener(ispl);		   
	   return jsp;
   }
   
   
    /**
    * Listener for the Axis directions combox boxes
    * Updates the model in the Devices class with any GUI changes
    */
   class SidesBoxListener implements ActionListener {
      String side_;
      JComboBox box_;

      public SidesBoxListener(String side, JComboBox box) {
         side_ = side;
         box_ = box;
      }

      public void actionPerformed(ActionEvent ae) {
         params_.putSidesInfo(side_, (String) box_.getSelectedItem());
      }
   };
   
   
  /**
    * Constructs a DropDown box containing A/B.
    * Sets selection based on info in the Devices class and attaches
    * a Listener
    * 
    * @param side - Name under which this side is known in the Device class
    * @return constructed JComboBox
    */
   private JComboBox makeABBox(String side) {
      String[] ab = {SpimParams.A, SpimParams.B};
      JComboBox jcb = new JComboBox(ab);
      jcb.setSelectedItem(params_.getSidesInfo(side));
      jcb.addActionListener(new SidesBoxListener (side, jcb));
 
      return jcb;
   }
   
}
