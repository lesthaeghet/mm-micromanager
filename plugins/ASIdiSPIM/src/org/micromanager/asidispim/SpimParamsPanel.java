///////////////////////////////////////////////////////////////////////////////
//FILE:          SpimParamsPanel.java
//PROJECT:       Micro-Manager 
//SUBSYSTEM:     ASIdiSPIM plugin
//-----------------------------------------------------------------------------
//
// AUTHOR:       Nico Stuurman, Jon Daniels
//
// COPYRIGHT:    University of California, San Francisco, & ASI, 2013
//
// LICENSE:      This file is distributed under the BSD license.
//               License text is included with the source distribution.
//
//               This file is distributed in the hope that it will be useful,
//               but WITHOUT ANY WARRANTY; without even the implied warranty
//               of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//
//               IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//               CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//               INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES.

package org.micromanager.asidispim;

import org.micromanager.asidispim.Data.SpimParams;
import org.micromanager.asidispim.Data.Devices;
import org.micromanager.asidispim.Utils.ListeningJPanel;
import org.micromanager.asidispim.Utils.SpimParamsListenerInterface;
import org.micromanager.utils.ReportingUtils;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;

import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import net.miginfocom.swing.MigLayout;

/**
 *
 * @author nico
 * @author Jon
 */
public class SpimParamsPanel extends ListeningJPanel {

   SpimParams params_;
   Devices devices_;

   public SpimParamsPanel(SpimParams params, Devices devices) {
      super(new MigLayout(
            "",
            "[right]16[center]16[center]",
            "[]12[]"));
      params_ = params;
      devices_ = devices;

      try {
         add(new JLabel("Number of sides:"), "split 2");
         add(makeSpinnerInteger(SpimParams.NR_SIDES, 1, 2));

         add(new JLabel("First side:"), "align right");
         String[] ab = {SpimParams.FIRSTSIDE_A_VAL, SpimParams.FIRSTSIDE_B_VAL};
         add(makeDropDownBox(SpimParams.FIRSTSIDE, ab), "wrap");

         add(new JLabel("Side A"), "cell 1 2");
         add(new JLabel("Side B"), "wrap");

         add(new JLabel("Number of repeats:"));
         add(makeSpinnerInteger(SpimParams.NR_REPEATS, 1, 100), "span 2, wrap");

         add(new JLabel("Number of slices:"));
         add(makeSpinnerInteger(SpimParams.NR_SLICES, 1, 99), "span 2, wrap");

         add(new JLabel("Lines scans per slice:"));
         add(makeSpinnerInteger(SpimParams.NR_LINESCANS_PER_SLICE, 1, 1000), "span 2, wrap");

         add(new JLabel("Line scan period (ms):"));
         add(makeSpinnerInteger(SpimParams.LINE_SCAN_PERIOD, 1, 10000));
         add(makeSpinnerInteger(SpimParams.LINE_SCAN_PERIOD_B, 1, 10000), "wrap");

         add(new JLabel("Delay before each slice (ms):"));
         add(makeSpinnerFloat(SpimParams.DELAY_BEFORE_SLICE, 0, 10000, 0.25), "span 2, wrap");

         add(new JLabel("Delay before each side (ms):"));
         add(makeSpinnerFloat(SpimParams.DELAY_BEFORE_SIDE, 0, 10000, 0.25), "span 2, wrap");

      } catch (Exception ex) {
         ReportingUtils.showError("Error creating SpimParamsPanel, probably a type mismatch");
      }

   }


   /**
    * Listener for int Spinners in the GUI
    * Updates the Spim Params model with any GUI changes
    * Also implements SpimParamsListenerInterface, causing updates in the model
    * that were generated by changes in the device to be propagated back to the UI
    */
   class SpinnerListenerInt implements ChangeListener, SpimParamsListenerInterface {
      String spimParamName_;
      JSpinner sp_;

      public SpinnerListenerInt(String spimParamName, JSpinner sp) {
         spimParamName_ = spimParamName;
         sp_ = sp;
      }

      public void stateChanged(ChangeEvent ce) {
         params_.props_.setPropValue(spimParamName_, ((Integer)sp_.getValue()).intValue());
      }

      public void spimParamsChangedAlert() {
         sp_.setValue(params_.props_.getPropValueInteger(spimParamName_));
      }
   };

   /**
    * Listener for float Spinners in the GUI
    * Updates the Spim Params model with any GUI changes
    * Also implements SpimParamsListenerInterface, causing updates in the model
    * that were generated by changes in the device to be propagated back to the UI
    */
   // same as IntSpinnerListener except
   //  - cast to Float object in stateChanged()
   //  - getPropValueFloat in spimParamsChangedAlert()
   class SpinnerListenerFloat implements ChangeListener, SpimParamsListenerInterface {
      String spimParamName_;
      JSpinner sp_;

      public SpinnerListenerFloat(String spimParamName, JSpinner sp) {
         spimParamName_ = spimParamName;
         sp_ = sp;
      }

      public void stateChanged(ChangeEvent ce) {
         params_.props_.setPropValue(spimParamName_, (float)((Double)sp_.getValue()).doubleValue());
      }

      public void spimParamsChangedAlert() {
         sp_.setValue(params_.props_.getPropValueFloat(spimParamName_));
      }
   };

   private JSpinner makeSpinnerInteger(String spimParamName, int min, int max) throws ParseException {
      SpinnerModel jspm = new SpinnerNumberModel(params_.props_.getPropValueInteger(spimParamName), min, max, 1);
      JSpinner jsp = new JSpinner(jspm);
      SpinnerListenerInt ispl = new SpinnerListenerInt(spimParamName, jsp);
      jsp.addChangeListener(ispl);
      params_.addListener(ispl);		   
      return jsp;
   }

   private JSpinner makeSpinnerFloat(String spimParamName, double min, double max, double step) throws ParseException {
      SpinnerModel jspm = new SpinnerNumberModel((double)params_.props_.getPropValueFloat(spimParamName), min, max, step);
      JSpinner jsp = new JSpinner(jspm);
      SpinnerListenerFloat ispl = new SpinnerListenerFloat(spimParamName, jsp);
      jsp.addChangeListener(ispl);
      params_.addListener(ispl);		   
      return jsp;
   }

   /**
    * Listener for the string-based dropdown boxes
    * Updates the model in the params class with any GUI changes
    */
   class StringBoxListener implements ActionListener {
      String key_;
      JComboBox box_;

      public StringBoxListener(String key, JComboBox box) {
         key_ = key;
         box_ = box;
      }

      public void actionPerformed(ActionEvent ae) {
         params_.props_.setPropValue(key_, (String) box_.getSelectedItem());
      }
   };

   /**
    * Constructs a DropDown box selecting between multiple strings
    * Sets selection based on property value and attaches a Listener
    * 
    * @param key property key as known in the params
    * @param vals array of strings, each one is a different option in the dropdown 
    * @return constructed JComboBox
    */
   private JComboBox makeDropDownBox(String key, String[] vals) {
      JComboBox jcb = new JComboBox(vals);
      jcb.setSelectedItem(params_.props_.getPropValueString(key));
      jcb.addActionListener(new StringBoxListener (key, jcb));
      return jcb;
   }

}
